{"version":3,"names":["dbButtonCss","DbButton","render","h","class","this","icononly","ariaexpanded","ariapressed","variant","disabled","formaction","formenctype","formmethod","formnovalidate","formtarget","name","title","tooltip","type","value","size","icon","iconafter","dbIconCss","DbIcon"],"sources":["src/components/db-button/db-button.scss?tag=db-button","src/components/db-button/db-button.tsx","src/components/db-icon/db-icon.scss?tag=db-icon&encapsulation=shadow","src/components/db-icon/db-icon.tsx"],"sourcesContent":["@import '../general';\n@import 'button';\n@import '@db-ui/core/sources/_patterns/00-base/icons/icons.helpers';\n\n:host[disabled] {\n  pointer-events: none;\n}\n\n// Enabling to hide text next to the icon\nbutton.is-icon-text-replace {\n  @include is-icon-text-replace();\n}\n\ndb-icon {\n  .is-icon-text-replace & {\n    --icon-margin-after: 0;\n  }\n\n  &.iconafter {\n    --icon-margin-after: 0;\n\n    margin-inline-start: 0.375rem;\n  }\n}\n","import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'db-button',\n  styleUrl: 'db-button.scss'\n})\nexport class DbButton {\n  /**\n   * If the button controls a grouping of other elements, the ariaexpanded state indicates whether the controlled grouping is currently expanded or collapsed.\n   */\n  @Prop({ reflect: true }) ariaexpanded?: 'true' | 'false' = null;\n\n  /**\n   * Defines the button as a toggle button. The value of aria-pressed describes the state of the button.\n   */\n  @Prop({ reflect: true }) ariapressed?: 'true' | 'false' = null;\n\n  /**\n   * The disabled attribute can be set to keep a user from clicking on the button.\n   */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /**\n   * The formaction attribute specifies where to send the form-data when a form is submitted. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formaction?: string;\n\n  /**\n   * The formenctype attribute specifies how form-data should be encoded before sending it to a server. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formenctype?: string;\n\n  /**\n   * The formmethod attribute specifies how to send the form-data (which HTTP method to use). Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formmethod?: 'get' | 'post';\n\n  /**\n   * The formnovalidate attribute specifies which that the form-data should not be validated on submission. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formnovalidate?: boolean = false;\n\n  /**\n   * The formtarget attribute specifies where to display the response after submitting the form. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formtarget?: '_self' | '_blank' | '_parent' | '_top';\n\n  /**\n   * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed behind the elements content.\n   */\n  @Prop({ reflect: true }) iconafter?: string;\n\n  /**\n   * Define the text next to the icon specified via the icon Property to get hidden.\n   */\n  @Prop({ reflect: true }) icononly?: boolean;\n\n  /**\n   * The name attribute specifies a name for the button.\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * The tooltip attribute specifies the title of button.\n   */\n  @Prop({ reflect: true }) tooltip?: string;\n\n  /**\n   * The type attribute specifies the type of button.\n   */\n  @Prop({ reflect: true }) type: 'button' | 'reset' | 'submit' = 'submit';\n\n  /**\n   * The value attribute specifies an initial value for the button.\n   */\n  @Prop({ reflect: true }) value?: string;\n\n  /**\n   * The variant attribute specifies a visual expression of button.\n   */\n  @Prop({ reflect: true }) variant:\n    | 'primary'\n    | 'secondary-outline'\n    | 'secondary-solid'\n    | 'tertiary-plain'\n    | 'brand-primary';\n\n  /**\n   * The size attribute specifies the button size out of three sizes.\n   */\n  @Prop({ reflect: true }) size?: 'small' | 'regular' | 'large';\n\n  render() {\n    return (\n      <button\n        class={'elm-button' + (this.icononly ? ' is-icon-text-replace' : '')}\n        aria-expanded={this.ariaexpanded}\n        aria-pressed={this.ariapressed}\n        data-variant={this.variant}\n        disabled={this.disabled}\n        formaction={this.formaction}\n        formenctype={this.formenctype}\n        formmethod={this.formmethod}\n        formnovalidate={this.formnovalidate}\n        formtarget={this.formtarget}\n        name={this.name}\n        title={this.tooltip}\n        type={this.type}\n        value={this.value}\n        data-size={this.size}\n      >\n        {this.icon ? <db-icon icon={this.icon} /> : null}\n        <slot />\n        {this.iconafter ? (\n          <db-icon icon={this.iconafter} class=\"iconafter\" />\n        ) : null}\n      </button>\n    );\n  }\n}\n","@import 'db-ui-core.general';\n@import 'icons';\n","import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'db-icon',\n  styleUrl: 'db-icon.scss',\n  shadow: true\n})\nexport class DbIcon {\n  /**\n   * The icon attribute specifies the icon to use.\n   */\n  @Prop() icon!: string;\n\n  /**\n   * The variant attribute specifies the style and size of an icon.\n   */\n  @Prop() variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline';\n\n  render() {\n    return (\n      <span\n        data-icon={this.icon}\n        data-icon-variant={this.variant}\n        aria-hidden=\"true\"\n      />\n    );\n  }\n}\n"],"mappings":"2CAAA,MAAMA,EAAc,q7L,MCMPC,EAAQ,M,2CAIwC,K,iBAKD,K,cAKZ,M,mGAoBM,M,oJAmCW,S,gEAsB/D,MAAAC,GACE,OACEC,EAAA,UACEC,MAAO,cAAgBC,KAAKC,SAAW,wBAA0B,IAAG,gBACrDD,KAAKE,aAAY,eAClBF,KAAKG,YAAW,eAChBH,KAAKI,QACnBC,SAAUL,KAAKK,SACfC,WAAYN,KAAKM,WACjBC,YAAaP,KAAKO,YAClBC,WAAYR,KAAKQ,WACjBC,eAAgBT,KAAKS,eACrBC,WAAYV,KAAKU,WACjBC,KAAMX,KAAKW,KACXC,MAAOZ,KAAKa,QACZC,KAAMd,KAAKc,KACXC,MAAOf,KAAKe,MAAK,YACNf,KAAKgB,MAEfhB,KAAKiB,KAAOnB,EAAA,WAASmB,KAAMjB,KAAKiB,OAAW,KAC5CnB,EAAA,aACCE,KAAKkB,UACJpB,EAAA,WAASmB,KAAMjB,KAAKkB,UAAWnB,MAAM,cACnC,K,aCxHZ,MAAMoB,EAAY,ku9E,MCOLC,EAAM,M,oEAuBjB,MAAAvB,GACE,OACEC,EAAA,oBACaE,KAAKiB,KAAI,oBACDjB,KAAKI,QAAO,cACnB,Q"}