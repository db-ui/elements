{"version":3,"file":"static/js/558.167afe78.chunk.js","mappings":"wNAOMA,EAAc,SAAdA,EAAeC,GACnB,OAAOA,EAAMC,KAAI,SAACC,EAAMC,GAAK,OAC3BC,EAAAA,EAAAA,GAAAA,KAAAA,CAAIC,IAAG,8BAAyBF,GAASG,UAAWJ,EAAKK,MACtDL,EAAKM,WAAYJ,EAAAA,EAAAA,GAAAA,KAAAA,KAAKL,EAAYG,EAAKM,WACrC,GAET,EAEMC,EAAsB,SAAtBA,EACJD,GAEA,IAAMR,EAAoC,GAY1C,OAXAQ,EAASE,SAAQ,SAACC,GAChB,IAAMC,EAAyC,IAA1BD,EAAMH,SAASK,OAEpCb,EAAMc,KAAK,CACTP,KAAMI,EAAMI,UACZP,UACGI,GAAgBD,EAAMH,SACnBC,EAAoBO,MAAMC,KAAKN,EAAMH,WACrC,I,IAGHR,CACT,EACMkB,EAAc,SAAdA,EAAehB,GACnBA,EAAKM,SAASE,SAAQ,SAACC,GACrBT,EAAKK,KAAOL,EAAKK,KAAKY,QAAQR,EAAMJ,KAAM,IAC1CW,EAAYP,E,GAEhB,EAEMS,EAA4B,SAChCZ,GAOA,GAAiC,IALPA,EAASa,QACjC,SAACV,GAAK,MAC4B,YAAhCA,EAAMW,QAAQC,eACkB,MAAhCZ,EAAMW,QAAQC,aAAqB,IAEjBV,OAAc,CAClC,IAAMb,EAAQS,EAAoBD,GAIlC,OAHAR,EAAMU,SAAQ,SAACR,GACbgB,EAAYhB,E,IAEPF,C,CAET,MAAO,EACT,EAEMwB,EAAkB,SAAlBA,EAAmBC,GACvB,IAAIlB,EAAO,GAmBX,OAjBAkB,EAASf,SAAQ,SAACgB,GAChB,IAAIC,EAAU,SACVC,GAAc,EACdF,EAAKlB,UAAYkB,EAAKlB,SAASK,OAAS,IAC1Cc,EAAU,8BACVC,GAAc,GAGhBD,GAAW,kBAAJ,OAAsBD,EAAKG,KAAI,wBACpCH,EAAKI,SAAU,OACjB,aAAKJ,EAAKK,MAAK,gBACfxB,GAAQoB,EACJC,IACFrB,GAAQ,SAAJ,OAAaiB,EAAgBE,EAAKlB,UAAS,YAEjDD,GAAQ,O,IAEHA,CACT,EAEMyB,EAAyB,SAAzBA,EAA0BxB,GAC1BA,GAAYA,EAASK,OAAS,GAChCL,EAASE,SAAQ,SAACC,GAChB,GAAoC,OAAhCA,EAAMW,QAAQC,eAA0BZ,EAAMH,SAAU,CAC1D,IAAMyB,EAAcjB,MAAMC,KAAKN,EAAMH,UAEnCyB,EAAYC,MAAK,SAACC,GAAM,MAAsC,OAAjCA,EAAOb,QAAQC,aAAsB,KAElEZ,EAAMyB,aAAa,gBAAiB,QAEtCJ,EAAuBC,E,IAI/B,EAMaI,EAAgB,W,oIAoB3B,WACMC,KAAKZ,KACPY,KAAKb,UAAWc,EAAAA,EAAAA,GAAUD,KAAKZ,OAE/BY,KAAK9B,SAAWQ,MAAMC,KAAKqB,KAAKE,KAAKhC,UACrC8B,KAAKG,UAAYrB,EAA0BkB,KAAK9B,UAC5C8B,KAAK9B,SAAS0B,MAAK,SAACvB,GAAK,MAAqC,OAAhCA,EAAMW,QAAQC,aAAsB,KACpEe,KAAKI,iBAAkB,EACvBV,EAAuBM,KAAK9B,WAE5B8B,KAAKE,KAAKlC,UAAY,G,GAG3B,CAAAD,IAAAA,SAAAsC,MAED,WACE,OACEvC,EAAAA,EAAAA,GAAAA,MAAAA,CAAKwC,MAAM,qBAAqBC,GAAG,mBACjCzC,EAAAA,EAAAA,GAAAA,QAAAA,CAAO0C,KAAK,WAAWD,GAAG,2BAC1BzC,EAAAA,EAAAA,GAAAA,QAAAA,CACE2C,QAAQ,wBACRC,MAAM,yBACNJ,MAAM,gBAELN,KAAKW,UAEPX,KAAKb,WAAYrB,EAAAA,EAAAA,GAAAA,KAAAA,CAAIE,UAAWkB,EAAgBc,KAAKb,aACpDa,KAAKb,WACLrB,EAAAA,EAAAA,GAAAA,KAAAA,KACGkC,KAAKG,WAAa1C,EAAYuC,KAAKG,YAClCH,KAAKI,kBACJJ,KAAKG,WACNH,KAAK9B,SAASP,KAAI,SAACU,EAAOR,GAAK,OAC7BC,EAAAA,EAAAA,GAAAA,KAAAA,CACEC,IAAG,kCAA6BF,GAChCG,UAAWK,EAAMI,WACjB,IAELuB,KAAKI,kBAAmBtC,EAAAA,EAAAA,GAAAA,OAAAA,O,GAKlC,CAAAC,IAAAA,OAAA6C,IAAAA,W,0BA/D0B,G,QCpGD,usY,gICKfC,EAAO,W,MAClB,OAAoB,QAAb,EAAAC,OAAOC,cAAM,eAAEC,eAAgBC,KAAKC,SAASC,UACtD,EA+DaC,EAAqB,SAACjC,GACjC,OAAKA,EACEA,EACJxB,KACC,SAACyB,GAAI,mCACmBA,EAAKiC,KAAI,qBAAajC,EAAKkC,OAAM,aAAKlC,EAAKK,MAAK,sBAEzE8B,KAAK,MANc,EAOxB,EAOaC,EAAsC,SAAtCA,EACXtB,EACAuB,GAcIvB,EAAKhC,UACPQ,MAAMC,KAAKuB,EAAKhC,UAAUE,SAAQ,SAACC,GACG,YAAhCA,EAAMW,QAAQC,eAChBZ,EAAMyB,aAAa,eAAgB2B,GAEjCpD,EAAMH,UACRsD,EAAoCnD,EAAOoD,E,GAInD,EAMaxB,EAAY,SAACrC,GACxB,IACE,GAAoB,kBAATA,EACT,OAAO8D,KAAKC,MAAM/D,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBc,MAAO,OAAOd,C,CAClC,MAAOgE,GACP,OAAO,C,CAEX,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-mainnavigation/db-mainnavigation.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-mainnavigation/db-mainnavigation.scss?tag=db-mainnavigation","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["import { Component, Element, h, Prop } from '@stencil/core';\nimport {\n  DbMainnavigationDataType,\n  DbMainnavigationItemType\n} from './db-mainnavigation-type';\nimport { parseData } from '../../utils/utils';\n\nconst getJsxLinks = (items: DbMainnavigationItemType[]) => {\n  return items.map((item, index) => (\n    <li key={`mainnavigation-item-${index}`} innerHTML={item.html}>\n      {item.children && <ul>{getJsxLinks(item.children)}</ul>}\n    </li>\n  ));\n};\n\nconst setupItemsRecursive = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const items: DbMainnavigationItemType[] = [];\n  children.forEach((child) => {\n    const singleAnchor = child.children.length === 1;\n\n    items.push({\n      html: child.outerHTML,\n      children:\n        !singleAnchor && child.children\n          ? setupItemsRecursive(Array.from(child.children))\n          : []\n    });\n  });\n  return items;\n};\nconst cleanUpItem = (item: DbMainnavigationItemType) => {\n  item.children.forEach((child) => {\n    item.html = item.html.replace(child.html, '');\n    cleanUpItem(child);\n  });\n};\n\nconst setupOnlyDbLinkNavigation = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const nonDbLinkChildren = children.filter(\n    (child) =>\n      child.tagName.toLowerCase() !== 'db-link' &&\n      child.tagName.toLowerCase() !== 'a'\n  );\n  if (nonDbLinkChildren.length === 0) {\n    const items = setupItemsRecursive(children);\n    items.forEach((item) => {\n      cleanUpItem(item);\n    });\n    return items;\n  }\n  return [];\n};\n\nconst getCompDataHtml = (compData: DbMainnavigationDataType[]) => {\n  let html = '';\n\n  compData.forEach((data) => {\n    let listTag = '<li>\\n';\n    let hasChildren = false;\n    if (data.children && data.children.length > 0) {\n      listTag = '<li aria-haspopup=\"true\">\\n';\n      hasChildren = true;\n    }\n\n    listTag += `<db-link href=\"${data.link}\" current=\"${\n      data.current ? 'page' : false\n    }\">${data.label}</db-link>\\n`;\n    html += listTag;\n    if (hasChildren) {\n      html += `<ul>\\n${getCompDataHtml(data.children)}</ul>\\n`;\n    }\n    html += '</li>';\n  });\n  return html;\n};\n\nconst addAreaPopupsRecursive = (children: Element[]) => {\n  if (children && children.length > 0) {\n    children.forEach((child) => {\n      if (child.tagName.toLowerCase() === 'li' && child.children) {\n        const subChildren = Array.from(child.children);\n        if (\n          subChildren.find((sChild) => sChild.tagName.toLowerCase() === 'ul')\n        ) {\n          child.setAttribute('aria-haspopup', 'true');\n        }\n        addAreaPopupsRecursive(subChildren);\n      }\n    });\n  }\n};\n\n@Component({\n  tag: 'db-mainnavigation',\n  styleUrl: 'db-mainnavigation.scss'\n})\nexport class DbMainnavigation {\n  /**\n   * The site-name attribute can be set to have the site name for small screens.\n   */\n  @Prop({ reflect: true, attribute: 'site-name' }) siteName?: string;\n\n  /**\n   * The data attribute can be used to generate main navigation by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  private hasItemsWrapper: boolean;\n\n  private compData: DbMainnavigationDataType[];\n\n  private children: Element[];\n  private onlyLinks: DbMainnavigationItemType[];\n\n  @Element() host: HTMLDbMainnavigationElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this.children = Array.from(this.host.children);\n      this.onlyLinks = setupOnlyDbLinkNavigation(this.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n        addAreaPopupsRecursive(this.children);\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <nav class=\"cmp-mainnavigation\" id=\"mainnavigation\">\n        <input type=\"checkbox\" id=\"toggle_mainnavigation\" />\n        <label\n          htmlFor=\"toggle_mainnavigation\"\n          title=\"Toggle main navigation\"\n          class=\"is-site-name\"\n        >\n          {this.siteName}\n        </label>\n        {this.compData && <ul innerHTML={getCompDataHtml(this.compData)} />}\n        {!this.compData && (\n          <ul>\n            {this.onlyLinks && getJsxLinks(this.onlyLinks)}\n            {!this.hasItemsWrapper &&\n              !this.onlyLinks &&\n              this.children.map((child, index) => (\n                <li\n                  key={`cmp-mainnavigation-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ul>\n        )}\n      </nav>\n    );\n  }\n}\n","@import '../general';\n@import 'mainnavigation';\n\na {\n  @extend .elm-link;\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["getJsxLinks","items","map","item","index","h","key","innerHTML","html","children","setupItemsRecursive","forEach","child","singleAnchor","length","push","outerHTML","Array","from","cleanUpItem","replace","setupOnlyDbLinkNavigation","filter","tagName","toLowerCase","getCompDataHtml","compData","data","listTag","hasChildren","link","current","label","addAreaPopupsRecursive","subChildren","find","sChild","setAttribute","DbMainnavigation","this","parseData","host","onlyLinks","hasItemsWrapper","value","class","id","type","htmlFor","title","siteName","get","uuid","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","href","target","join","addIconVariantToAllDbLinksRecursive","variant","JSON","parse","error"],"sourceRoot":""}