{"version":3,"file":"static/js/558.ff1132d3.chunk.js","mappings":"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","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-mainnavigation/db-mainnavigation.scss?tag=db-mainnavigation","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-mainnavigation/db-mainnavigation.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["@import '../general';\n@import 'mainnavigation';\n\na {\n  @extend .elm-link;\n}\n","import { Component, Element, h, Prop } from '@stencil/core';\nimport {\n  DbMainnavigationDataType,\n  DbMainnavigationItemType\n} from './db-mainnavigation-type';\nimport { parseData } from '../../utils/utils';\n\nconst getJsxLinks = (items: DbMainnavigationItemType[]) => {\n  return items.map((item, index) => (\n    <li key={`mainnavigation-item-${index}`} innerHTML={item.html}>\n      {item.children && <ul>{getJsxLinks(item.children)}</ul>}\n    </li>\n  ));\n};\n\nconst setupItemsRecursive = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const items: DbMainnavigationItemType[] = [];\n  children.forEach((child) => {\n    const singleAnchor = child.children.length === 1;\n\n    items.push({\n      html: child.outerHTML,\n      children:\n        !singleAnchor && child.children\n          ? setupItemsRecursive(Array.from(child.children))\n          : []\n    });\n  });\n  return items;\n};\nconst cleanUpItem = (item: DbMainnavigationItemType) => {\n  item.children.forEach((child) => {\n    item.html = item.html.replace(child.html, '');\n    cleanUpItem(child);\n  });\n};\n\nconst setupOnlyDbLinkNavigation = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const nonDbLinkChildren = children.filter(\n    (child) =>\n      child.tagName.toLowerCase() !== 'db-link' &&\n      child.tagName.toLowerCase() !== 'a'\n  );\n  if (nonDbLinkChildren.length === 0) {\n    const items = setupItemsRecursive(children);\n    items.forEach((item) => {\n      cleanUpItem(item);\n    });\n    return items;\n  }\n  return [];\n};\n\nconst getCompDataHtml = (compData: DbMainnavigationDataType[]) => {\n  let html = '';\n\n  compData.forEach((data) => {\n    let listTag = '<li>\\n';\n    let hasChildren = false;\n    if (data.children && data.children.length > 0) {\n      listTag = '<li aria-haspopup=\"true\">\\n';\n      hasChildren = true;\n    }\n\n    listTag += `<db-link href=\"${data.link}\" current=\"${\n      data.current ? 'page' : false\n    }\">${data.label}</db-link>\\n`;\n    html += listTag;\n    if (hasChildren) {\n      html += `<ul>\\n${getCompDataHtml(data.children)}</ul>\\n`;\n    }\n    html += '</li>';\n  });\n  return html;\n};\n\nconst addAreaPopupsRecursive = (children: Element[]) => {\n  if (children && children.length > 0) {\n    children.forEach((child) => {\n      if (child.tagName.toLowerCase() === 'li' && child.children) {\n        const subChildren = Array.from(child.children);\n        if (\n          subChildren.find((sChild) => sChild.tagName.toLowerCase() === 'ul')\n        ) {\n          child.setAttribute('aria-haspopup', 'true');\n        }\n        addAreaPopupsRecursive(subChildren);\n      }\n    });\n  }\n};\n\n@Component({\n  tag: 'db-mainnavigation',\n  styleUrl: 'db-mainnavigation.scss'\n})\nexport class DbMainnavigation {\n  /**\n   * The site-name attribute can be set to have the site name for small screens.\n   */\n  @Prop({ reflect: true, attribute: 'site-name' }) siteName?: string;\n\n  /**\n   * The data attribute can be used to generate main navigation by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  private hasItemsWrapper: boolean;\n\n  private compData: DbMainnavigationDataType[];\n\n  private children: Element[];\n  private onlyLinks: DbMainnavigationItemType[];\n\n  @Element() host: HTMLDbMainnavigationElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this.children = Array.from(this.host.children);\n      this.onlyLinks = setupOnlyDbLinkNavigation(this.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n        addAreaPopupsRecursive(this.children);\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <nav class=\"cmp-mainnavigation\" id=\"mainnavigation\">\n        <input type=\"checkbox\" id=\"toggle_mainnavigation\" />\n        {this.siteName && (\n          <label\n            htmlFor=\"toggle_mainnavigation\"\n            title=\"Toggle main navigation\"\n            class=\"is-site-name\"\n          >\n            {this.siteName}\n          </label>\n        )}\n        {this.compData && <ul innerHTML={getCompDataHtml(this.compData)} />}\n        {!this.compData && (\n          <ul>\n            {this.onlyLinks && getJsxLinks(this.onlyLinks)}\n            {!this.hasItemsWrapper &&\n              !this.onlyLinks &&\n              this.children.map((child, index) => (\n                <li\n                  key={`cmp-mainnavigation-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ul>\n        )}\n      </nav>\n    );\n  }\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["getJsxLinks","items","map","item","index","h","key","concat","innerHTML","html","children","setupItemsRecursive","forEach","child","singleAnchor","length","push","outerHTML","Array","from","cleanUpItem","replace","getCompDataHtml","compData","data","listTag","hasChildren","link","current","label","addAreaPopupsRecursive","tagName","toLowerCase","subChildren","find","sChild","setAttribute","DbMainnavigation","componentWillLoad","this","parseData","host","onlyLinks","filter","setupOnlyDbLinkNavigation","hasItemsWrapper","render","class","id","type","siteName","htmlFor","title","uuid","_a","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","href","target","join","addIconVariantToAllDbLinksRecursive","variant","JSON","parse","error"],"sourceRoot":""}