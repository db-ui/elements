{"version":3,"file":"static/js/904.2e2f6383.chunk.js","mappings":"iLAAA,MCQaA,EAAU,M,6EAesB,aAAcC,EAAAA,EAAAA,K,oBAId,I,uCAQD,C,CAE1CC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,iBACTD,EAAAA,EAAAA,GAAA,YACEE,MAAOC,KAAKD,MACZE,IAAKD,KAAKC,IACVC,GAAIF,KAAKG,OACHC,cAAeJ,KAAKI,cAC1BC,OACkB,IAAhBL,KAAKM,OACD,CAAE,mBAAsB,GAAHC,OAAMP,KAAKD,QAChC,CAAE,GAAM,IAAI,mBAEAC,KAAKG,OAAS,YAEhCH,KAAKI,gBACLP,EAAAA,EAAAA,GAAA,SACEW,QAASR,KAAKG,OACdD,GAAIF,KAAKG,OAAS,SAAQ,cACd,QAEXH,KAAKD,MACLC,KAAKS,gB,WD3DI,g1O,gEEKTd,EAAOA,K,MAClB,OAAoB,QAAbe,EAAAC,OAAOC,cAAM,IAAAF,OAAA,EAAAA,EAAEG,eAAgBC,KAAKC,SAASC,UAAU,EAgEnDC,EAAsBC,GAC5BA,EACEA,EACJC,KACEC,GAAI,sBAAAb,OACmBa,EAAKC,KAAI,cAAAd,OAAaa,EAAKE,OAAM,MAAAf,OAAKa,EAAKG,MAAK,qBAEzEC,KAAK,MANc,GAcXC,EAAsCA,CACjDC,EACAC,KAcID,EAAKE,UACPC,MAAMC,KAAKJ,EAAKE,UAAUG,SAASC,IACG,YAAhCA,EAAMC,QAAQC,eAChBF,EAAMG,aAAa,eAAgBR,GAEjCK,EAAMJ,UACRH,EAAoCO,EAAOL,E,KAUtCS,EAAaC,IACxB,IACE,GAAoB,kBAATA,EACT,OAAOC,KAAKC,MAAMF,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBR,MAAO,OAAOQ,C,CAClC,MAAOG,GACP,OAAO,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-progress/db-progress.scss?tag=db-progress&encapsulation=scoped","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-progress/db-progress.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["@import '../general';\n@import 'progress';\n","import { Component, h, Prop } from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-progress',\n  styleUrl: 'db-progress.scss',\n  scoped: true\n})\nexport class DbProgress {\n  /**\n   * The currentValue of the progress indicator.\n   */\n  @Prop({ reflect: true }) value: number;\n\n  /**\n   * The currentValue of the progress indicator.\n   */\n  @Prop({ reflect: true }) max: number;\n\n  /**\n   * Optional id - otherwise random id will be provided\n   */\n\n  @Prop({ reflect: false }) htmlid: string = 'progress-' + uuid();\n  /**\n   * The percentage sign - default %.\n   */\n  @Prop({ reflect: false }) percentagesign = '%';\n  /**\n   * As a circle\n   */\n  @Prop({ reflect: false }) circle: boolean;\n  /**\n   * Indeterminate\n   */\n  @Prop({ reflect: false }) indeterminate = false;\n\n  render() {\n    return (\n      <div class=\"elm-progress\">\n        <progress\n          value={this.value}\n          max={this.max}\n          id={this.htmlid}\n          {...{ indeterminate: this.indeterminate }}\n          style={\n            this.circle === true\n              ? { ['--progress-conic']: `${this.value}` }\n              : { ['']: '' }\n          }\n          aria-describedby={this.htmlid + '-label'}\n        />\n        {!this.indeterminate && (\n          <label\n            htmlFor={this.htmlid}\n            id={this.htmlid + '-label'}\n            aria-hidden=\"true\"\n          >\n            {this.value}\n            {this.percentagesign}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbProgress","uuid","render","h","class","value","this","max","id","htmlid","indeterminate","style","circle","concat","htmlFor","percentagesign","_a","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","map","data","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","variant","children","Array","from","forEach","child","tagName","toLowerCase","setAttribute","parseData","item","JSON","parse","error"],"sourceRoot":""}