{"version":3,"file":"static/js/497.f830f203.chunk.js","mappings":"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","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-pagination/db-pagination.scss?tag=db-pagination","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-pagination/db-pagination.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["@import 'db-ui-core.general';\n@import 'pagination';\n@import 'link';\n\n:host {\n  @extend html;\n  @extend body;\n}\n\n// TODO: Maybe move the following to DB UI Core, as we might need to enable buttons in general\n.cmp-pagination {\n  button {\n    border: none;\n    font-size: 0.875rem;\n    background-color: inherit;\n    cursor: pointer;\n  }\n\n  .elm-link {\n    &[data-rel='prev'] {\n      @include icon(glyph(chevron-left), $partial: true);\n      @include is-icon-text-replace();\n    }\n\n    &[data-rel='next'] {\n      @include icon(glyph(chevron-right), $partial: true);\n      @include is-icon-text-replace();\n    }\n  }\n}\n\n.elm-link[aria-disabled='true'][aria-current='page'] {\n  opacity: 1;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  Fragment,\n  h,\n  Prop,\n  Watch\n} from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-pagination',\n  styleUrl: 'db-pagination.scss'\n})\nexport class DbPagination {\n  private pagesFull: number[];\n\n  /**\n   * The ellipsisstart attribute only needs to be passed when working with slots.\n   * Should to be set to true if an ellipsis needs to be shown at the start of\n   * the pagination.\n   */\n  @Prop({ reflect: true }) ellipsisstart: boolean;\n\n  /**\n   * The ellipsisend attribute only needs to be passed when working with slots.\n   * Should to be set to true if an ellipsis needs to be shown at the end of\n   * the pagination.\n   */\n  @Prop({ reflect: true }) ellipsisend: boolean;\n\n  /**\n   * The currentpage attribute is a obligatory number attribute and indicates which\n   * page number is highlighted in the pagination.\n   */\n  @Prop({ reflect: true }) currentpage = 1;\n\n  /**\n   * The pages attribute is a obligatory number attribute and indicates how many\n   * pages the pagination knows about.\n   */\n  @Prop({ reflect: true }) pages = 2;\n\n  /**\n   * The count attribute is a number attribute and defines the number of pages\n   * displayed apart from the first and last page (except if currentpage is the\n   * first or last page, then these pages are included in the count).\n   */\n  @Prop({ reflect: true }) count = 2;\n\n  /**\n   * The titleprevious attribute is a string attribute and defines the title of\n   * the left arrow in the pagination.\n   */\n  @Prop({ reflect: true }) titleprevious = 'Goto previous page';\n\n  /**\n   * The titlenext attribute is a string attribute and defines the title of\n   * the right arrow in the pagination.\n   */\n  @Prop({ reflect: true }) titlenext = 'Goto next page';\n\n  /**\n   * The titlepagination attribute is a string attribute and defines the title of\n   * each page number (except first and last) displayed in the pagination.\n   */\n  @Prop({ reflect: true }) titlepagination = 'Page Number';\n\n  /**\n   * The textprevious attribute is a string attribute and defines the text\n   * content of the left arrow in the pagination.\n   */\n  @Prop({ reflect: true }) textprevious = 'Previous';\n\n  /**\n   * The textnext attribute is a string attribute and defines the text\n   * content of the right arrow in the pagination.\n   */\n  @Prop({ reflect: true }) textnext = 'Next';\n\n  /**\n   * The arialabel attribute is a string attribute and defines the text\n   * content of the aria-label in the pagination.\n   */\n  @Prop({ reflect: true }) arialabel = 'Pagination';\n\n  /**\n   * Optional id for the caption aria label - otherwise random id will be set\n   */\n  @Prop({ reflect: false }) ariaid: string = 'pagination-' + uuid();\n\n  /**\n   * Mapping for default change Event\n   */\n  @Event() dbChange;\n\n  private handleChange(event) {\n    this.dbChange.emit(event);\n  }\n\n  /*\n   * Watch for outside changes on relevant attributes\n   */\n  @Watch('pages')\n  @Watch('currentpage')\n  @Watch('count')\n  watchHandler() {\n    this.sliceAndSetDefaults();\n  }\n\n  @Element() hostElement: HTMLDbPaginationElement;\n  /*\n   * Sets the initial values on components first load\n   */\n  componentWillLoad() {\n    this.sliceAndSetDefaults();\n  }\n\n  private sliceAndSetDefaults() {\n    const pagesFullOverload = Array.from(Array(this.pages + 1).keys());\n    const [, ...pagesFull] = pagesFullOverload;\n    this.pagesFull = pagesFull;\n  }\n\n  private decorateChild(child) {\n    child.setAttribute('class', 'elm-link');\n    if (child.getAttribute('data-currentpage')) {\n      child.setAttribute('aria-current', 'page');\n      child.setAttribute('aria-disabled', 'true');\n    }\n    return <li innerHTML={child.outerHTML} />;\n  }\n\n  private paginationButtonFragment({\n    page,\n    curr,\n    ariaCurrent,\n    ariaDisabled,\n    title,\n    rel,\n    tabindex,\n    disabled,\n    index\n  }) {\n    return (\n      <li key={index}>\n        <button\n          class=\"elm-link\"\n          data-rel={rel === 'none' ? false : `${rel}`}\n          tabindex={tabindex ? '-1' : false}\n          title={title + ` ${page ? page : ''}`}\n          type=\"button\"\n          {...((page === curr || disabled) && ariaCurrent)}\n          {...((page === curr || disabled) && ariaDisabled)}\n          onClick={(event) => this.handleChange(event)}\n        >\n          {page}\n        </button>\n      </li>\n    );\n  }\n\n  private navElement(children) {\n    return (\n      <nav\n        class=\"cmp-pagination\"\n        role=\"navigation\"\n        aria-labelledby={this.ariaid}\n      >\n        <h2 class=\"elm-headline \" id={this.ariaid}>\n          {this.arialabel.charAt(0).toUpperCase() + this.arialabel.slice(1)}\n        </h2>\n        <ol>{children}</ol>\n      </nav>\n    );\n  }\n\n  private slotChildren() {\n    const _children = Array.from(this.hostElement.children);\n\n    // Don't render the children provided via slot\n    this.hostElement.innerHTML = '';\n\n    const [firstChild, ...withoutFirst] = _children;\n    const [lastChild, ...withoutTips] = [...withoutFirst].reverse();\n    const tiplessChildren = withoutTips.reverse();\n\n    const currentPage = tiplessChildren.findIndex((child) =>\n      child.getAttribute('data-currentpage')\n    );\n\n    const prevPage = (\n      currentPage >= 0\n        ? tiplessChildren[currentPage - 1].cloneNode(true)\n        : firstChild.cloneNode(true)\n    ) as HTMLAnchorElement;\n\n    prevPage.setAttribute('rel', 'prev');\n    prevPage.setAttribute('tabindex', '-1');\n\n    const nextPage = (\n      currentPage >= 0 && tiplessChildren.length <= currentPage\n        ? tiplessChildren[currentPage + 1].cloneNode(true)\n        : lastChild.cloneNode(true)\n    ) as HTMLAnchorElement;\n    nextPage.setAttribute('rel', 'next');\n\n    return this.navElement(\n      <Fragment>\n        {this.decorateChild(prevPage)}\n        {this.decorateChild(firstChild)}\n        {this.ellipsisstart && <li>&hellip;</li>}\n        {tiplessChildren.map(this.decorateChild)}\n        {this.ellipsisend && <li>&hellip;</li>}\n        {this.decorateChild(lastChild)}\n        {this.decorateChild(nextPage)}\n      </Fragment>\n    );\n  }\n\n  private goToPreviousPage() {\n    return this.paginationButtonFragment({\n      page: this.currentpage === 1 ? this.currentpage : this.currentpage - 1,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'prev',\n      tabindex: true,\n      disabled: this.currentpage === 1,\n      index: 'A'\n    });\n  }\n\n  private goToNextPage() {\n    return this.paginationButtonFragment({\n      page:\n        this.currentpage === this.pages + 1\n          ? this.currentpage\n          : this.currentpage + 1,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlenext,\n      rel: 'next',\n      tabindex: true,\n      disabled: this.currentpage === this.pages ? true : false,\n      index: 'E'\n    });\n  }\n\n  private goToFirstPage() {\n    return this.paginationButtonFragment({\n      page: this.pagesFull[0],\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: false,\n      index: 'B'\n    });\n  }\n\n  private goToLastPage() {\n    return this.paginationButtonFragment({\n      page: this.pagesFull.slice(-1),\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: this.currentpage === this.pages,\n      index: 'C'\n    });\n  }\n\n  private showMiddlePage(num: number) {\n    return this.paginationButtonFragment({\n      page: num,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: false,\n      index: num\n    });\n  }\n\n  private showEllipsis(place: string) {\n    if (this.pagesFull.length < 8) {\n      return null;\n    }\n    if (this.currentpage < 4 && place === 'front') {\n      return null;\n    }\n    if (this.currentpage > this.pagesFull.length - 5 && place === 'back') {\n      return null;\n    }\n    return <li key={place}>&hellip;</li>;\n  }\n\n  private sliceCenterPages() {\n    // Decide how to cut the pages for the middle of the pagination\n    if (this.pagesFull.length < 8) {\n      return this.pagesFull.slice(1, -1);\n    }\n\n    const localCount =\n      this.currentpage <= 3 || this.currentpage >= this.pagesFull.length - 3\n        ? this.count + 1\n        : this.count;\n\n    if (this.currentpage + this.count >= this.pagesFull.length) {\n      return this.pagesFull.slice(-localCount - 1, -1);\n    }\n    if (this.pagesFull.length - 2 <= localCount) {\n      return this.pagesFull.slice(1, 1 + this.pagesFull.length - 2);\n    }\n    if (this.pagesFull.length - 2 > localCount && this.currentpage <= 3) {\n      return this.pagesFull.slice(1, 1 + localCount);\n    }\n    if (\n      this.pagesFull.length - 2 > this.count &&\n      this.currentpage > 3 &&\n      this.currentpage + this.count < this.pagesFull.length\n    ) {\n      const finalSlice = this.pagesFull.slice(\n        this.currentpage - 1,\n        this.currentpage + localCount\n      );\n\n      const isAtTheEnd = finalSlice.includes(this.pagesFull.length - 1);\n      return isAtTheEnd ? finalSlice : finalSlice.slice(0, -1);\n    }\n    return [];\n  }\n\n  private centerPages() {\n    return this.sliceCenterPages().map((num) => this.showMiddlePage(num));\n  }\n\n  render() {\n    const _children = Array.from(this.hostElement.children);\n    const hasChildren = _children.find(\n      (child) => child.tagName.toLowerCase() === 'a'\n    );\n\n    if (hasChildren) {\n      return this.slotChildren();\n    }\n\n    return this.navElement(\n      <Fragment>\n        {this.goToPreviousPage()}\n        {this.goToFirstPage()}\n        {this.showEllipsis('front')}\n        {this.pagesFull.length >= 3 ? this.centerPages() : null}\n        {this.showEllipsis('back')}\n        {this.goToLastPage()}\n        {this.goToNextPage()}\n      </Fragment>\n    );\n  }\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbPagination","uuid","handleChange","event","this","dbChange","emit","watchHandler","sliceAndSetDefaults","componentWillLoad","pagesFullOverload","Array","from","pages","keys","pagesFull","decorateChild","child","setAttribute","getAttribute","h","innerHTML","outerHTML","paginationButtonFragment","_ref","page","curr","ariaCurrent","ariaDisabled","title","rel","tabindex","disabled","index","key","Object","assign","class","concat","type","onClick","navElement","children","role","ariaid","id","arialabel","charAt","toUpperCase","slice","slotChildren","_children","hostElement","firstChild","withoutFirst","lastChild","withoutTips","reverse","tiplessChildren","currentPage","findIndex","prevPage","cloneNode","nextPage","length","Fragment","ellipsisstart","map","ellipsisend","goToPreviousPage","currentpage","titlepagination","goToNextPage","titlenext","goToFirstPage","goToLastPage","showMiddlePage","num","showEllipsis","place","sliceCenterPages","localCount","count","finalSlice","includes","centerPages","render","find","tagName","toLowerCase","_a","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","data","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","variant","forEach","parseData","item","JSON","parse","error"],"sourceRoot":""}