{"version":3,"file":"static/js/897.e6c6aeb5.chunk.js","mappings":"yKAAA,MCQaA,EAAU,M,kFAcc,E,CAMnC,YAAIC,GACF,OAAOC,KAAKC,S,CAGd,YAAIF,CAASG,GACXF,KAAKC,UAAYC,C,CAMnBC,iBAAAA,GACMH,KAAKI,KACPJ,KAAKK,UAAWC,EAAAA,EAAAA,GAAUN,KAAKI,OAE/BJ,KAAKC,UAAYM,MAAMC,KAAKR,KAAKS,KAAKV,UAClCC,KAAKD,SAASW,MAAMC,GAA0C,OAAhCA,EAAMC,QAAQC,gBAC9Cb,KAAKc,iBAAkB,EAEvBd,KAAKS,KAAKM,UAAY,G,CAK5BC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,WACEC,MAAM,eAAc,2BACMlB,KAAKmB,UAAY,aAE3CF,EAAAA,EAAAA,GAAA,eAAUjB,KAAKoB,SACdpB,KAAKK,WACJY,EAAAA,EAAAA,GAAA,QAAMI,KAAK,UAAUN,WAAWO,EAAAA,EAAAA,GAAmBtB,KAAKK,aAExDL,KAAKK,WACLY,EAAAA,EAAAA,GAAA,QAAMI,KAAK,YACPrB,KAAKc,iBACLd,KAAKC,UAAUsB,KAAI,CAACZ,EAAOa,KACzBP,EAAAA,EAAAA,GAAA,MAAIQ,IAAG,gBAAAC,OAAkBF,GAAST,UAAWJ,EAAMgB,cAEtD3B,KAAKc,kBAAmBG,EAAAA,EAAAA,GAAA,c,0CDpEf,8iS,gEEKTW,EAAOA,K,MAClB,OAAoB,QAAbC,EAAAC,OAAOC,cAAM,IAAAF,OAAA,EAAAA,EAAEG,eAAgBC,KAAKC,SAASC,UAAU,EAgEnDb,EAAsBjB,GAC5BA,EACEA,EACJkB,KACEnB,GAAI,sBAAAsB,OACmBtB,EAAKgC,KAAI,cAAAV,OAAatB,EAAKiC,OAAM,MAAAX,OAAKtB,EAAKkC,MAAK,qBAEzEC,KAAK,MANc,GAcXC,EAAsCA,CACjD/B,EACAgC,KAcIhC,EAAKV,UACPQ,MAAMC,KAAKC,EAAKV,UAAU2C,SAAS/B,IACG,YAAhCA,EAAMC,QAAQC,eAChBF,EAAMgC,aAAa,eAAgBF,GAEjC9B,EAAMZ,UACRyC,EAAoC7B,EAAO8B,E,KAUtCnC,EAAasC,IACxB,IACE,GAAoB,kBAATA,EACT,OAAOC,KAAKC,MAAMF,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBrC,MAAO,OAAOqC,C,CAClC,MAAOG,GACP,OAAO,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-dropdown/db-dropdown.scss?tag=db-dropdown","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-dropdown/db-dropdown.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["@import '../general';\n@import 'dropdown';\n","import { Component, h, Prop, Element } from '@stencil/core';\nimport { DbLinkType } from '../db-link/db-link-type';\nimport { getDefaultLinkData, parseData } from '../../utils/utils';\n\n@Component({\n  tag: 'db-dropdown',\n  styleUrl: 'db-dropdown.scss'\n})\nexport class DbDropdown {\n  /**\n   * The data attribute can be used to generate dropdown by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  /**\n   * The opposite attribute, changes the behaviour: dropdown -> left.\n   */\n  @Prop({ reflect: true }) opposite: boolean;\n\n  /**\n   * The summary attribute, shows a text for accessibility.\n   */\n  @Prop({ reflect: true }) summary = '';\n\n  private compData: DbLinkType[];\n\n  private hasItemsWrapper: boolean;\n\n  get children(): Element[] {\n    return this._children;\n  }\n\n  set children(value: Element[]) {\n    this._children = value;\n  }\n  private _children: Element[];\n\n  @Element() host: HTMLDbDropdownElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this._children = Array.from(this.host.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <details\n        class=\"cmp-dropdown\"\n        data-horizontal-position={this.opposite && 'opposite'}\n      >\n        <summary>{this.summary}</summary>\n        {this.compData && (\n          <menu type=\"toolbar\" innerHTML={getDefaultLinkData(this.compData)} />\n        )}\n        {!this.compData && (\n          <menu type=\"toolbar\">\n            {!this.hasItemsWrapper &&\n              this._children.map((child, index) => (\n                <li key={`cmp-dropdown-${index}`} innerHTML={child.outerHTML} />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </menu>\n        )}\n      </details>\n    );\n  }\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbDropdown","children","this","_children","value","componentWillLoad","data","compData","parseData","Array","from","host","find","child","tagName","toLowerCase","hasItemsWrapper","innerHTML","render","h","class","opposite","summary","type","getDefaultLinkData","map","index","key","concat","outerHTML","uuid","_a","window","crypto","randomUUID","Math","random","toString","href","target","label","join","addIconVariantToAllDbLinksRecursive","variant","forEach","setAttribute","item","JSON","parse","error"],"sourceRoot":""}