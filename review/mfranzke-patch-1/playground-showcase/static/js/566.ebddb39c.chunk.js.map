{"version":3,"file":"static/js/566.ebddb39c.chunk.js","mappings":"wNAKMA,EAAO,WACX,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,SAAMC,EACXF,KAAKG,kBAAeD,EACpBF,KAAKI,YAASF,EACdF,KAAKK,SAAMH,EACXF,KAAKM,WAAQJ,EACbF,KAAKO,YAASL,EACdF,KAAKQ,aAAUN,EACfF,KAAKS,aAAUP,EACfF,KAAKU,0BAAuBR,EAC5BF,KAAKW,OAAS,UAAWC,EAAAA,EAAAA,IAC1B,CAbU,4CAcX,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,YAAaT,IAAKL,KAAKK,IAAKJ,IAAKD,KAAKC,IAAKK,MAAON,KAAKM,MAAOS,OAAQf,KAAKI,OAAQG,OAAQP,KAAKO,OAAQC,QAASR,KAAKQ,QAAS,kBAAmBR,KAAKS,SAAWT,KAAKW,QAClM,GAhBU,sCAiBX,WACE,YAAqBT,IAAjBF,KAAKS,SACCI,EAAAA,EAAAA,GAAE,SAAU,KAAMb,KAAKgB,iBAAiBH,EAAAA,EAAAA,GAAE,aAAc,CAAEI,GAAIjB,KAAKW,QAAUX,KAAKS,UAIjFT,KAAKgB,eAGjB,GA1BU,+BA2BX,WACE,IAAME,EAAgBlB,KAAKG,aAAagB,MAAM,KAAKC,MAAMC,cACzD,OAAQR,EAAAA,EAAAA,GAAE,UAAW,MAAMA,EAAAA,EAAAA,GAAE,SAAU,CAAEE,OAAQf,KAAKG,aAAcmB,KAAM,UAAF,OAAYJ,KAAoBlB,KAAKgB,gBAC9G,GA9BU,yCA+BX,WACE,OAAQH,EAAAA,EAAAA,GAAE,UAAW,KAAMU,KAAKC,MAAMxB,KAAKU,sBAAsBe,KAAI,SAACC,EAAOC,GAAR,OAAmBd,EAAAA,EAAAA,GAAE,SAAU,CAAEe,IAAK,WAAF,OAAaD,GAASZ,OAAQW,EAAMtB,OAAQyB,MAAOH,EAAMG,OAA7F,IAAyG7B,KAAKgB,gBACpL,GAjCU,mCAkCX,WACE,YAAqBd,IAAjBF,KAAKS,SACCI,EAAAA,EAAAA,GAAE,SAAU,KAAMb,KAAK8B,qBAAqBjB,EAAAA,EAAAA,GAAE,aAAc,CAAEI,GAAIjB,KAAKW,QAAUX,KAAKS,UAIrFT,KAAK8B,mBAGjB,GA3CU,oBA4CX,WACE,OAAQjB,EAAAA,EAAAA,GAAEkB,EAAAA,EAAM,KAAO/B,KAAKG,cAAgBH,KAAKgC,yBAC9ChC,KAAKU,sBAAwBV,KAAKiC,+BACnCjC,KAAKkC,2BACR,KAhDU,KAkDbrC,EAAQsC,MApDW,qwH,4HCHnB,IAAMvB,EAAO,WACX,IAAIwB,EACJ,OAAiC,QAAxBA,EAAKC,OAAOC,cAA2B,IAAPF,OAAgB,EAASA,EAAGG,eAAiBC,KAAKC,SAASC,UACrG,EACKC,EAAqB,SAACC,GAC1B,OAAKA,EAEEA,EACJnB,KAAI,SAACoB,GAAD,mCAAgCA,EAAKC,KAArC,qBAAsDD,EAAKE,OAA3D,aAAsEF,EAAKG,MAA3E,sBACJC,KAAK,MAHC,EAIV,EAMKC,EAAsC,SAAtCA,EAAuCC,EAAMC,GAC7CD,EAAKE,UACPC,MAAMC,KAAKJ,EAAKE,UAAUG,SAAQ,SAACC,GACG,YAAhCA,EAAMC,QAAQrC,eAChBoC,EAAME,aAAa,eAAgBP,GAEjCK,EAAMJ,UACRH,EAAoCO,EAAOL,EAE9C,GAEJ,EAKKQ,EAAY,SAACC,GACjB,IACE,GAAoB,kBAATA,EACT,OAAOtC,KAAKC,MAAMqC,GAEpB,GAAoB,kBAATA,EACT,OAAOA,EACT,GAAIA,aAAgBP,MAClB,OAAOO,CAIV,CAFD,MAAOC,GACL,OAAO,CACR,CACF,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/db-image.entry.js","../../../packages/db-ui-elements-stencil/dist/esm/utils-a63157eb.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-18068034.js';\nimport { u as uuid } from './utils-a63157eb.js';\n\nconst dbImageCss = \"@charset \\\"UTF-8\\\";.sc-db-image:where(html){line-height:1.15}.sc-db-image:where(h1){font-size:2em;margin-block-end:0.67em;margin-block-start:0.67em}.sc-db-image:where(dl,ol.sc-db-image,ul).sc-db-image .sc-db-image:where(dl,ol.sc-db-image,ul).sc-db-image{margin-block-end:0;margin-block-start:0}.sc-db-image:where(hr){box-sizing:content-box;color:inherit;height:0}.sc-db-image:where(pre){font-family:monospace, monospace;font-size:1em}.sc-db-image:where(abbr[title]){text-decoration:underline;text-decoration:underline dotted}.sc-db-image:where(b,strong).sc-db-image{font-weight:bolder}.sc-db-image:where(code,kbd.sc-db-image,samp).sc-db-image{font-family:monospace, monospace;font-size:1em}.sc-db-image:where(small){font-size:80%}.sc-db-image:where(table){border-color:currentColor;text-indent:0}.sc-db-image:where(button,input.sc-db-image,select).sc-db-image{margin:0}.sc-db-image:where(button){text-transform:none}.sc-db-image:where(button,input.sc-db-image:is([type=button i],[type=reset i].sc-db-image,[type=submit i])).sc-db-image{-webkit-appearance:button}.sc-db-image:where(progress){vertical-align:baseline}.sc-db-image:where(select){text-transform:none}.sc-db-image:where(textarea){margin:0}.sc-db-image:where(input[type=search i]){-webkit-appearance:textfield;outline-offset:-2px}.sc-db-image::-webkit-inner-spin-button,.sc-db-image::-webkit-outer-spin-button{height:auto}.sc-db-image::-webkit-input-placeholder{color:inherit;opacity:0.54}.sc-db-image::-webkit-search-decoration{-webkit-appearance:none}.sc-db-image::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.sc-db-image:where(button,input.sc-db-image:is([type=button i],[type=color i].sc-db-image,[type=reset i].sc-db-image,[type=submit i])).sc-db-image::-moz-focus-inner{border-style:none;padding:0}.sc-db-image:where(button,input.sc-db-image:is([type=button i],[type=color i].sc-db-image,[type=reset i].sc-db-image,[type=submit i])).sc-db-image::-moz-focusring{outline:1px dotted ButtonText}.sc-db-image:where(:-moz-ui-invalid){box-shadow:none}.sc-db-image:where(dialog){background-color:white;border:solid;color:black;height:-moz-fit-content;height:fit-content;left:0;margin:auto;padding:1em;position:absolute;right:0;width:-moz-fit-content;width:fit-content}.sc-db-image:where(dialog:not([open])){display:none}.sc-db-image:where(summary){display:list-item}html.sc-db-image{box-sizing:border-box}*.sc-db-image,.sc-db-image::before,.sc-db-image::after{box-sizing:inherit}img.sc-db-image,embed.sc-db-image,iframe.sc-db-image,object.sc-db-image,video.sc-db-image{height:auto;max-width:100%}iframe.sc-db-image{border:0}nav.sc-db-image ol.sc-db-image,nav.sc-db-image ul.sc-db-image,[role=navigation].sc-db-image ol.sc-db-image,[role=navigation].sc-db-image ul.sc-db-image{list-style:none;margin:0;padding:0}.sc-db-image:root{--db-focus-outline-offset:1px;--db-focus-outline-color:#2c95c4}.sc-db-image:is(a,button.sc-db-image,input.sc-db-image,textarea.sc-db-image,summary).sc-db-image{--db-focus-outline-size:max(2px, 0.08em)}.sc-db-image:is(a,button.sc-db-image,input.sc-db-image,textarea.sc-db-image,summary).sc-db-image:focus-visible{outline:var(--db-focus-outline-size) var(--db-focus-outline-style, solid) var(--db-focus-outline-color, currentColor);outline-offset:var(--db-focus-outline-offset, var(--db-focus-outline-size))}.sc-db-image:where(ul){list-style-type:\\\"•   \\\"}.sc-db-image:where(ul) li.sc-db-image::marker{color:#ec0016}body.sc-db-image,div.sc-db-image,button.sc-db-image,input.sc-db-image,select.sc-db-image,textarea.sc-db-image{color:#282d37;font-family:\\\"DB Screen Sans\\\", Helvetica, Arial, sans-serif;font-size:1rem;font-weight:400;line-height:1.5}.elm-image.is-logo.sc-db-image{height:auto;margin:0.2rem 1rem 0.2rem 0;max-width:200px}.cmp-brand.sc-db-image .elm-image.is-logo.sc-db-image{width:39px}figure.sc-db-image{margin:0}\";\n\nconst DbImage = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.src = undefined;\n    this.modernformat = undefined;\n    this.srcset = undefined;\n    this.alt = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.loading = undefined;\n    this.caption = undefined;\n    this.responsivemediaquery = undefined;\n    this.ariaid = 'image-' + uuid();\n  }\n  getBasicImage() {\n    return (h(\"img\", { class: \"elm-image\", alt: this.alt, src: this.src, width: this.width, srcSet: this.srcset, height: this.height, loading: this.loading, \"aria-labelledby\": this.caption && this.ariaid }));\n  }\n  basicImageCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (h(\"figure\", null, this.getBasicImage(), h(\"figcaption\", { id: this.ariaid }, this.caption)));\n    }\n    else {\n      {\n        return this.getBasicImage();\n      }\n    }\n  }\n  getPictureWrapper() {\n    const fileExtension = this.modernformat.split('.').pop().toLowerCase();\n    return (h(\"picture\", null, h(\"source\", { srcSet: this.modernformat, type: `'image/${fileExtension}` }), this.getBasicImage()));\n  }\n  getResponsivePictureWrapper() {\n    return (h(\"picture\", null, JSON.parse(this.responsivemediaquery).map((query, index) => (h(\"source\", { key: `picture-${index}`, srcSet: query.srcset, media: query.media }))), this.getBasicImage()));\n  }\n  pictureCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (h(\"figure\", null, this.getPictureWrapper(), h(\"figcaption\", { id: this.ariaid }, this.caption)));\n    }\n    else {\n      {\n        return this.getPictureWrapper();\n      }\n    }\n  }\n  render() {\n    return (h(Host, null, (this.modernformat && this.pictureCaptionWrapper()) ||\n      (this.responsivemediaquery && this.getResponsivePictureWrapper()) ||\n      this.basicImageCaptionWrapper()));\n  }\n};\nDbImage.style = dbImageCss;\n\nexport { DbImage as db_image };\n","const uuid = () => {\n  var _a;\n  return ((_a = window.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID()) || Math.random().toString();\n};\nconst getDefaultLinkData = (compData) => {\n  if (!compData)\n    return '';\n  return compData\n    .map((data) => `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`)\n    .join('\\n');\n};\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nconst addIconVariantToAllDbLinksRecursive = (host, variant) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nconst parseData = (item) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object')\n      return item;\n    if (item instanceof Array)\n      return item;\n  }\n  catch (error) {\n    return false;\n  }\n};\n\nexport { addIconVariantToAllDbLinksRecursive as a, getDefaultLinkData as g, parseData as p, uuid as u };\n"],"names":["DbImage","hostRef","registerInstance","this","src","undefined","modernformat","srcset","alt","width","height","loading","caption","responsivemediaquery","ariaid","uuid","h","class","srcSet","getBasicImage","id","fileExtension","split","pop","toLowerCase","type","JSON","parse","map","query","index","key","media","getPictureWrapper","Host","pictureCaptionWrapper","getResponsivePictureWrapper","basicImageCaptionWrapper","style","_a","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","data","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","variant","children","Array","from","forEach","child","tagName","setAttribute","parseData","item","error"],"sourceRoot":""}