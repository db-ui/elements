{"version":3,"file":"static/js/566.ab5b9a15.chunk.js","mappings":"8MAQaA,EAAO,W,oPA0CyB,UAAWC,EAAAA,EAAAA,I,CA8ErD,O,qCA5EO,WACN,OACEC,EAAAA,EAAAA,GAAAA,MAAAA,CACEC,MAAM,YACNC,IAAKC,KAAKD,IACVE,IAAKD,KAAKC,IACVC,MAAOF,KAAKE,MACZC,OAAQH,KAAKI,OACbC,OAAQL,KAAKK,OACbC,QAASN,KAAKM,QAAO,kBACJN,KAAKO,SAAWP,KAAKQ,Q,GAG3C,sCACO,WACN,YAAqBC,IAAjBT,KAAKO,SAELV,EAAAA,EAAAA,GAAAA,SAAAA,KACGG,KAAKU,iBACNb,EAAAA,EAAAA,GAAAA,aAAAA,CAAYc,GAAIX,KAAKQ,QAASR,KAAKO,UAK9BP,KAAKU,e,GAGjB,+BAEO,WACN,IAAME,EAAgBZ,KAAKa,aAAaC,MAAM,KAAKC,MAAMC,cACzD,OACEnB,EAAAA,EAAAA,GAAAA,UAAAA,MACEA,EAAAA,EAAAA,GAAAA,SAAAA,CAAQM,OAAQH,KAAKa,aAAcI,KAAI,iBAAYL,KAClDZ,KAAKU,gB,GAGX,yCACO,WACN,OACEb,EAAAA,EAAAA,GAAAA,UAAAA,KACGqB,KAAKC,MAAMnB,KAAKoB,sBAAsBC,KAAI,SAACC,EAAOC,GAAK,OACtD1B,EAAAA,EAAAA,GAAAA,SAAAA,CACE2B,IAAG,kBAAaD,GAChBpB,OAAQmB,EAAMlB,OACdqB,MAAOH,EAAMG,OACb,IAEHzB,KAAKU,gB,GAGX,mCAEO,WACN,YAAqBD,IAAjBT,KAAKO,SAELV,EAAAA,EAAAA,GAAAA,SAAAA,KACGG,KAAK0B,qBACN7B,EAAAA,EAAAA,GAAAA,aAAAA,CAAYc,GAAIX,KAAKQ,QAASR,KAAKO,UAK9BP,KAAK0B,mB,GAGjB,oBAED,WACE,OACE7B,EAAAA,EAAAA,GAAC8B,EAAAA,EAAI,KACD3B,KAAKa,cAAgBb,KAAK4B,yBACzB5B,KAAKoB,sBAAwBpB,KAAK6B,+BACnC7B,KAAK8B,2B,KAGZ,EAxHiB,G,QCRD,07H,gICKNlC,EAAO,W,MAClB,OAAoB,QAAb,EAAAmC,OAAOC,cAAM,eAAEC,eAAgBC,KAAKC,SAASC,UACtD,EA+DaC,EAAqB,SAACC,GACjC,OAAKA,EACEA,EACJjB,KACC,SAACkB,GAAI,mCACmBA,EAAKC,KAAI,qBAAaD,EAAKE,OAAM,aAAKF,EAAKG,MAAK,sBAEzEC,KAAK,MANc,EAOxB,EAOaC,EAAsC,SAAtCA,EACXC,EACAC,GAcID,EAAKE,UACPC,MAAMC,KAAKJ,EAAKE,UAAUG,SAAQ,SAACC,GACG,YAAhCA,EAAMC,QAAQpC,eAChBmC,EAAME,aAAa,eAAgBP,GAEjCK,EAAMJ,UACRH,EAAoCO,EAAOL,E,GAInD,EAMaQ,EAAY,SAACC,GACxB,IACE,GAAoB,kBAATA,EACT,OAAOrC,KAAKC,MAAMoC,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBP,MAAO,OAAOO,C,CAClC,MAAOC,GACP,OAAO,C,CAEX,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-image/db-image.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-image/db-image.scss?tag=db-image&encapsulation=scoped","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["import { Component, h, Host, Prop } from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-image',\n  styleUrl: 'db-image.scss',\n  scoped: true\n})\nexport class DbImage {\n  /**\n   * The image src URL.\n   */\n  @Prop({ reflect: true }) src!: string;\n  /**\n   * Optional modern image format srcset URL (like avif or webp).\n   */\n  @Prop({ reflect: false }) modernformat: string;\n  /**\n   * Optional srcset for high density images\n   */\n  @Prop({ reflect: false }) srcset: string;\n  /**\n   * The alt attribute is used by \"screen reader\" software so that a person who is listening to the content of a webpage (for instance, a person who is blind) can interact with this element.\n   */\n  @Prop({ reflect: true }) alt!: string;\n\n  /**\n   * Width for the image\n   */\n  @Prop({ reflect: true }) width!: number;\n\n  /**\n   * Height for the image\n   */\n  @Prop({ reflect: true }) height!: number;\n  /**\n   * Optional lazy loading attribute\n   */\n  @Prop({ reflect: false }) loading: 'lazy';\n  /**\n   * Optional caption for the image\n   */\n  @Prop({ reflect: false }) caption: string;\n  /**\n   * Optional responsive media queries as array of objects '[{srcset:\"/path/to/picture.extension\", media:\"(min-width: 768px)\"}]'\n   */\n  @Prop({ reflect: false }) responsivemediaquery: string;\n  /**\n   * Optional id for the caption aria label - otherwise random id will be set\n   */\n  @Prop({ reflect: false }) ariaid: string = 'image-' + uuid();\n\n  private getBasicImage() {\n    return (\n      <img\n        class=\"elm-image\"\n        alt={this.alt}\n        src={this.src}\n        width={this.width}\n        srcSet={this.srcset}\n        height={this.height}\n        loading={this.loading}\n        aria-labelledby={this.caption && this.ariaid}\n      />\n    );\n  }\n  private basicImageCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (\n        <figure>\n          {this.getBasicImage()}\n          <figcaption id={this.ariaid}>{this.caption}</figcaption>\n        </figure>\n      );\n    } else {\n      {\n        return this.getBasicImage();\n      }\n    }\n  }\n\n  private getPictureWrapper() {\n    const fileExtension = this.modernformat.split('.').pop().toLowerCase();\n    return (\n      <picture>\n        <source srcSet={this.modernformat} type={`'image/${fileExtension}`} />\n        {this.getBasicImage()}\n      </picture>\n    );\n  }\n  private getResponsivePictureWrapper() {\n    return (\n      <picture>\n        {JSON.parse(this.responsivemediaquery).map((query, index) => (\n          <source\n            key={`picture-${index}`}\n            srcSet={query.srcset}\n            media={query.media}\n          />\n        ))}\n        {this.getBasicImage()}\n      </picture>\n    );\n  }\n\n  private pictureCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (\n        <figure>\n          {this.getPictureWrapper()}\n          <figcaption id={this.ariaid}>{this.caption}</figcaption>\n        </figure>\n      );\n    } else {\n      {\n        return this.getPictureWrapper();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {(this.modernformat && this.pictureCaptionWrapper()) ||\n          (this.responsivemediaquery && this.getResponsivePictureWrapper()) ||\n          this.basicImageCaptionWrapper()}\n      </Host>\n    );\n  }\n}\n","@import 'db-ui-core.general';\n@import 'image';\n\nfigure {\n  margin: 0;\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbImage","uuid","h","class","alt","this","src","width","srcSet","srcset","height","loading","caption","ariaid","undefined","getBasicImage","id","fileExtension","modernformat","split","pop","toLowerCase","type","JSON","parse","responsivemediaquery","map","query","index","key","media","getPictureWrapper","Host","pictureCaptionWrapper","getResponsivePictureWrapper","basicImageCaptionWrapper","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","data","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","variant","children","Array","from","forEach","child","tagName","setAttribute","parseData","item","error"],"sourceRoot":""}