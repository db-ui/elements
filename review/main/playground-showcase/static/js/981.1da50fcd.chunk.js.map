{"version":3,"file":"static/js/981.1da50fcd.chunk.js","mappings":"kOAQaA,EAAgB,W,oGAU3B,WACE,OAAOC,KAAKC,S,EACb,IAED,SAAaC,GACXF,KAAKC,UAAYC,C,GAClB,+BAKD,WACMF,KAAKG,KACPH,KAAKI,UAAWC,EAAAA,EAAAA,GAAUL,KAAKG,OAE/BH,KAAKC,UAAYK,MAAMC,KAAKP,KAAKQ,KAAKC,UAClCT,KAAKS,SAASC,MAAK,SAACC,GAAK,MAAqC,OAAhCA,EAAMC,QAAQC,aAAsB,IACpEb,KAAKc,iBAAkB,EAEvBd,KAAKQ,KAAKO,UAAY,G,GAG3B,oBAED,WACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,KACFjB,KAAKI,WACJY,EAAAA,EAAAA,GAAAA,KAAAA,CACEE,MAAM,qBACNH,WAAWI,EAAAA,EAAAA,GAAmBnB,KAAKI,aAGrCJ,KAAKI,WACLY,EAAAA,EAAAA,GAAAA,KAAAA,CAAIE,MAAM,uBACNlB,KAAKc,iBACLd,KAAKC,UAAUmB,KAAI,SAACT,EAAOU,GAAK,OAC9BL,EAAAA,EAAAA,GAAAA,KAAAA,CACEM,IAAG,kCAA6BD,GAChCN,UAAWJ,EAAMY,WACjB,IAELvB,KAAKc,kBAAmBE,EAAAA,EAAAA,GAAAA,OAAAA,O,GAKlC,2B,0BAzD0B,G,QCRD,gjH,gICKfQ,EAAO,W,MAClB,OAAoB,QAAb,EAAAC,OAAOC,cAAM,eAAEC,eAAgBC,KAAKC,SAASC,UACtD,EA+DaX,EAAqB,SAACf,GACjC,OAAKA,EACEA,EACJgB,KACC,SAACjB,GAAI,mCACmBA,EAAK4B,KAAI,qBAAa5B,EAAK6B,OAAM,aAAK7B,EAAK8B,MAAK,sBAEzEC,KAAK,MANc,EAOxB,EAOaC,EAAsC,SAAtCA,EACX3B,EACA4B,GAcI5B,EAAKC,UACPH,MAAMC,KAAKC,EAAKC,UAAU4B,SAAQ,SAAC1B,GACG,YAAhCA,EAAMC,QAAQC,eAChBF,EAAM2B,aAAa,eAAgBF,GAEjCzB,EAAMF,UACR0B,EAAoCxB,EAAOyB,E,GAInD,EAMa/B,EAAY,SAACkC,GACxB,IACE,GAAoB,kBAATA,EACT,OAAOC,KAAKC,MAAMF,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBjC,MAAO,OAAOiC,C,CAClC,MAAOG,GACP,OAAO,C,CAEX,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-metanavigation/db-metanavigation.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-metanavigation/db-metanavigation.scss?tag=db-metanavigation","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["import { Component, Element, h, Host, Prop } from '@stencil/core';\nimport { DbLinkType } from '../db-link/db-link-type';\nimport { getDefaultLinkData, parseData } from '../../utils/utils';\n\n@Component({\n  tag: 'db-metanavigation',\n  styleUrl: 'db-metanavigation.scss'\n})\nexport class DbMetanavigation {\n  /**\n   * The data attribute can be used to generate metanavigation by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  private compData: DbLinkType[];\n\n  private hasItemsWrapper: boolean;\n\n  get children(): Element[] {\n    return this._children;\n  }\n\n  set children(value: Element[]) {\n    this._children = value;\n  }\n  private _children: Element[];\n\n  @Element() host: HTMLDbMetanavigationElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this._children = Array.from(this.host.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.compData && (\n          <ul\n            class=\"cmp-metanavigation\"\n            innerHTML={getDefaultLinkData(this.compData)}\n          />\n        )}\n        {!this.compData && (\n          <ul class=\"cmp-metanavigation\">\n            {!this.hasItemsWrapper &&\n              this._children.map((child, index) => (\n                <li\n                  key={`cmp-metanavigation-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ul>\n        )}\n      </Host>\n    );\n  }\n}\n","@import '../general';\n@import 'metanavigation';\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbMetanavigation","this","_children","value","data","compData","parseData","Array","from","host","children","find","child","tagName","toLowerCase","hasItemsWrapper","innerHTML","h","Host","class","getDefaultLinkData","map","index","key","outerHTML","uuid","window","crypto","randomUUID","Math","random","toString","href","target","label","join","addIconVariantToAllDbLinksRecursive","variant","forEach","setAttribute","item","JSON","parse","error"],"sourceRoot":""}