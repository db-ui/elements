{"version":3,"names":["dbLinkCss","DbLink","componentWillLoad","children","Array","from","this","host","length","tagName","toLowerCase","getAttributeNames","forEach","attribute","getAttribute","text","textContent","innerHTML","render","h","class","icononly","href","hreflang","type","media","rel","target","current","icon","variant","iconVariant"],"sources":["src/components/db-link/db-link.scss?tag=db-link","src/components/db-link/db-link.tsx"],"sourcesContent":["@import '../general';\n@import 'link';\n","import { Component, Element, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'db-link',\n  styleUrl: 'db-link.scss'\n})\nexport class DbLink {\n  /**\n   * The current attribute is the state on an element indicates that this element represents the current item within a container or set of related elements.\n   */\n  @Prop({ reflect: true }) current:\n    | 'page'\n    | 'step'\n    | 'location'\n    | 'date'\n    | 'time'\n    | 'true'\n    | 'false';\n\n  /**\n   * The href attribute represents a hyperlink (a hypertext anchor).\n   */\n  @Prop({ reflect: true }) href: string;\n\n  /**\n   * The hreflang attribute gives the language of the linked resource. The value must be a valid BCP 47 language tag.\n   */\n  @Prop({ reflect: true }) hreflang: string;\n\n  /**\n   * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * The variant attribute specifies the style and size of an icon.\n   */\n  @Prop({ reflect: true, attribute: 'icon-variant' }) iconVariant?:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline' = '24-outline';\n\n  /**\n   * Define the text next to the icon specified via the icon Property to get hidden.\n   */\n  @Prop({ reflect: true }) icononly?: boolean;\n\n  /**\n   * The media attribute describes for which media the target document was designed. The value must be a valid media query. The default, if the media attribute is omitted, is \"all\".\n   */\n  @Prop({ reflect: true }) media: string;\n\n  /**\n   * The rel attribute controls what kinds of links the elements create. The attribue's value must be a set of space-separated tokens. The allowed keywords and their meanings are defined below.\n   */\n  @Prop({ reflect: true }) rel:\n    | 'alternate'\n    | 'appendix'\n    | 'author'\n    | 'bookmark'\n    | 'chapter'\n    | 'contents'\n    | 'copyright'\n    | 'glossary'\n    | 'help'\n    | 'index'\n    | 'license'\n    | 'next'\n    | 'nofollow'\n    | 'noopener'\n    | 'noreferrer'\n    | 'prefetch'\n    | 'prev'\n    | 'search'\n    | 'section'\n    | 'start'\n    | 'subsection'\n    | 'tag';\n\n  /**\n   * The target attribute gives the name of the browsing context that will be used. User agents use this name when following hyperlinks.\n   */\n  @Prop({ reflect: true }) target: '_blank' | '_self' | '_parent' | '_top';\n\n  /**\n   * The type attribute, if present, gives the MIME type of the linked resource. The value must be a valid MIME type. User agents must not consider the type attribute authoritative â€” upon fetching the resource, user agents must not use metadata included in the link to the resource to determine its type.\n   */\n  @Prop({ reflect: true }) type: string;\n\n  /**\n   * The text attribute can be used to set the text inside the anchor tag without slot.\n   */\n  @Prop({ reflect: true }) text: string;\n\n  @Element() host: HTMLDbLinkElement;\n\n  componentWillLoad() {\n    const children = Array.from(this.host.children);\n    // This is a workaround for frameworks like angular.\n    // They use custom attributes like \"routerLink\" on an <a>.\n    // We copy those attributes to the <a> inside <db-link>.\n    if (children.length === 1 && children[0].tagName.toLowerCase() === 'a') {\n      children[0].getAttributeNames().forEach((attribute) => {\n        this[attribute] = children[0].getAttribute(attribute);\n      });\n      this.text = children[0].textContent;\n      this.host.innerHTML = '';\n    }\n  }\n\n  render() {\n    return (\n      <a\n        class={'elm-link' + (this.icononly ? ' is-icon-text-replace' : '')}\n        href={this.href}\n        hreflang={this.hreflang}\n        data-type={this.type}\n        media={this.media}\n        rel={this.rel}\n        target={this.target}\n        aria-current={this.current}\n      >\n        {this.icon ? (\n          <db-icon icon={this.icon} variant={this.iconVariant} />\n        ) : null}\n        {this.text && this.text}\n        {!this.text && <slot />}\n      </a>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAY,soM,MCMLC,EAAM,M,iIA2CE,a,8HAwDnB,iBAAAC,GACE,MAAMC,EAAWC,MAAMC,KAAKC,KAAKC,KAAKJ,UAItC,GAAIA,EAASK,SAAW,GAAKL,EAAS,GAAGM,QAAQC,gBAAkB,IAAK,CACtEP,EAAS,GAAGQ,oBAAoBC,SAASC,IACvCP,KAAKO,GAAaV,EAAS,GAAGW,aAAaD,EAAU,IAEvDP,KAAKS,KAAOZ,EAAS,GAAGa,YACxBV,KAAKC,KAAKU,UAAY,E,EAI1B,MAAAC,GACE,OACEC,EAAA,KACEC,MAAO,YAAcd,KAAKe,SAAW,wBAA0B,IAC/DC,KAAMhB,KAAKgB,KACXC,SAAUjB,KAAKiB,SAAQ,YACZjB,KAAKkB,KAChBC,MAAOnB,KAAKmB,MACZC,IAAKpB,KAAKoB,IACVC,OAAQrB,KAAKqB,OAAM,eACLrB,KAAKsB,SAElBtB,KAAKuB,KACJV,EAAA,WAASU,KAAMvB,KAAKuB,KAAMC,QAASxB,KAAKyB,cACtC,KACHzB,KAAKS,MAAQT,KAAKS,MACjBT,KAAKS,MAAQI,EAAA,a"}