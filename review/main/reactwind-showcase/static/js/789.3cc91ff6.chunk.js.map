{"version":3,"file":"static/js/789.3cc91ff6.chunk.js","mappings":"sNAOaA,EAAM,W,4DAI2C,Y,eAKd,E,qDAeF,SAAUC,EAAAA,EAAAA,K,UAKtB,Q,eAKK,E,oBAgDpC,O,8BA1BD,WACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,MACHD,EAAAA,EAAAA,GAAA,SACEE,MAAM,WACNC,KAAwB,WAAlBC,KAAKC,SAAwB,WAAa,QAChDC,GAAIF,KAAKG,SAAQ,YACNH,KAAKC,SAChBG,SAAUJ,KAAKI,SACfC,KAAML,KAAKK,KACXC,QAASN,KAAKO,YAEhBX,EAAAA,EAAAA,GAAA,SACEY,QAASR,KAAKG,SACdM,KAAK,SAAQ,cACD,OAAM,eACJT,KAAKU,SAElBV,KAAKW,MAAOf,EAAAA,EAAAA,GAAA,WAASc,QAAQ,aAAaC,KAAMX,KAAKW,OAAW,MACjEf,EAAAA,EAAAA,GAAA,aACCI,KAAKY,WACJhB,EAAAA,EAAAA,GAAA,WAASc,QAAQ,aAAaC,KAAMX,KAAKY,YACvC,M,KAIXlB,CAAA,CAlFgB,G,QCPD,6oJ,gICKLC,EAAO,W,MAClB,OAAoB,QAAbkB,EAAAC,OAAOC,cAAM,IAAAF,OAAA,EAAAA,EAAEG,eAAgBC,KAAKC,SAASC,UACtD,EA+DaC,EAAqB,SAACC,GACjC,OAAKA,EACEA,EACJC,KACC,SAACC,GAAI,4BAAAC,OACmBD,EAAKE,KAAI,cAAAD,OAAaD,EAAKG,OAAM,MAAAF,OAAKD,EAAKI,MAAK,sBAEzEC,KAAK,MANc,EAOxB,EAOaC,EAAsC,SAAtCA,EACXC,EACApB,GAcIoB,EAAKC,UACPC,MAAMC,KAAKH,EAAKC,UAAUG,SAAQ,SAACC,GACG,YAAhCA,EAAMC,QAAQC,eAChBF,EAAMG,aAAa,eAAgB5B,GAEjCyB,EAAMJ,UACRF,EAAoCM,EAAOzB,E,GAInD,EAMa6B,EAAY,SAACC,GACxB,IACE,GAAoB,kBAATA,EACT,OAAOC,KAAKC,MAAMF,GAEpB,GAAoB,kBAATA,EAAmB,OAAOA,EACrC,GAAIA,aAAgBR,MAAO,OAAOQ,C,CAClC,MAAOG,GACP,OAAO,C,CAEX,C","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-chip/db-chip.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-chip/db-chip.scss?tag=db-chip","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["import { Component, Host, h, Prop } from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-chip',\n  styleUrl: 'db-chip.scss'\n})\nexport class DbChip {\n  /**\n   *  Decides which datatype you want to use: filter (1-n); selection (1);\n   */\n  @Prop({ reflect: true }) datatype: 'filter' | 'selection' = 'selection';\n\n  /**\n   * The disabled attribute can be set to keep a user from clicking on the chip.\n   */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /**\n   * Attribute to add icon before chip.\n   */\n  @Prop({ reflect: true }) icon: string;\n\n  /**\n   * Attribute to add icon after chip.\n   */\n  @Prop({ reflect: true }) iconafter?: string;\n\n  /**\n   * The input_id of a label form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a label element.\n   */\n  @Prop({ reflect: true }) input_id: string = 'chip-' + uuid();\n\n  /**\n   *  Name to group multiple chips.\n   */\n  @Prop({ reflect: true }) name = 'chips';\n\n  /**\n   *  Selected state\n   */\n  @Prop({ reflect: true }) selected? = false;\n\n  /**\n   * Predefined variants to change background color and font color.\n   */\n  @Prop({ reflect: true }) variant:\n    | 'informative'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'track'\n    | 'poi-essen-trinken'\n    | 'poi-einkaufen'\n    | 'poi-gesundheit'\n    | 'poi-kunst-kultur'\n    | 'poi-wissenswertes'\n    | 'poi-freizeit'\n    | 'poi-zivile-rel-einrichtungen'\n    | 'poi-dienstleistungen'\n    | 'poi-db-services-einrichtung'\n    | 'poi-wegeleitung';\n\n  render() {\n    return (\n      <Host>\n        <input\n          class=\"elm-chip\"\n          type={this.datatype === 'filter' ? 'checkbox' : 'radio'}\n          id={this.input_id}\n          data-type={this.datatype}\n          disabled={this.disabled}\n          name={this.name}\n          checked={this.selected}\n        />\n        <label\n          htmlFor={this.input_id}\n          role=\"button\"\n          aria-hidden=\"true\"\n          data-variant={this.variant}\n        >\n          {this.icon ? <db-icon variant=\"20-outline\" icon={this.icon} /> : null}\n          <slot />\n          {this.iconafter ? (\n            <db-icon variant=\"20-outline\" icon={this.iconafter} />\n          ) : null}\n        </label>\n      </Host>\n    );\n  }\n}\n","@import '../general';\n@import 'chip';\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbChip","uuid","h","Host","class","type","this","datatype","id","input_id","disabled","name","checked","selected","htmlFor","role","variant","icon","iconafter","_a","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","map","data","concat","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","children","Array","from","forEach","child","tagName","toLowerCase","setAttribute","parseData","item","JSON","parse","error"],"sourceRoot":""}