{"version":3,"file":"static/js/497.32ea377e.chunk.js","mappings":"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","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-pagination/db-pagination.tsx","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-pagination/db-pagination.scss?tag=db-pagination","../../../packages/db-ui-elements-stencil/dist/esm/src/utils/utils.ts"],"sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  Fragment,\n  h,\n  Prop,\n  Watch\n} from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-pagination',\n  styleUrl: 'db-pagination.scss'\n})\nexport class DbPagination {\n  private pagesFull: number[];\n\n  /**\n   * The ellipsisstart attribute only needs to be passed when working with slots.\n   * Should to be set to true if an ellipsis needs to be shown at the start of\n   * the pagination.\n   */\n  @Prop({ reflect: true }) ellipsisstart: boolean;\n\n  /**\n   * The ellipsisend attribute only needs to be passed when working with slots.\n   * Should to be set to true if an ellipsis needs to be shown at the end of\n   * the pagination.\n   */\n  @Prop({ reflect: true }) ellipsisend: boolean;\n\n  /**\n   * The currentpage attribute is a obligatory number attribute and indicates which\n   * page number is highlighted in the pagination.\n   */\n  @Prop({ reflect: true }) currentpage = 1;\n\n  /**\n   * The pages attribute is a obligatory number attribute and indicates how many\n   * pages the pagination knows about.\n   */\n  @Prop({ reflect: true }) pages = 2;\n\n  /**\n   * The count attribute is a number attribute and defines the number of pages\n   * displayed apart from the first and last page (except if currentpage is the\n   * first or last page, then these pages are included in the count).\n   */\n  @Prop({ reflect: true }) count = 2;\n\n  /**\n   * The titleprevious attribute is a string attribute and defines the title of\n   * the left arrow in the pagination.\n   */\n  @Prop({ reflect: true }) titleprevious = 'Goto previous page';\n\n  /**\n   * The titlenext attribute is a string attribute and defines the title of\n   * the right arrow in the pagination.\n   */\n  @Prop({ reflect: true }) titlenext = 'Goto next page';\n\n  /**\n   * The titlepagination attribute is a string attribute and defines the title of\n   * each page number (except first and last) displayed in the pagination.\n   */\n  @Prop({ reflect: true }) titlepagination = 'Page Number';\n\n  /**\n   * The textprevious attribute is a string attribute and defines the text\n   * content of the left arrow in the pagination.\n   */\n  @Prop({ reflect: true }) textprevious = 'Previous';\n\n  /**\n   * The textnext attribute is a string attribute and defines the text\n   * content of the right arrow in the pagination.\n   */\n  @Prop({ reflect: true }) textnext = 'Next';\n\n  /**\n   * The arialabel attribute is a string attribute and defines the text\n   * content of the aria-label in the pagination.\n   */\n  @Prop({ reflect: true }) arialabel = 'Pagination';\n\n  /**\n   * Optional id for the caption aria label - otherwise random id will be set\n   */\n  @Prop({ reflect: false }) ariaid: string = 'pagination-' + uuid();\n\n  /**\n   * Mapping for default change Event\n   */\n  @Event() dbChange;\n\n  private handleChange(event) {\n    this.dbChange.emit(event);\n  }\n\n  /*\n   * Watch for outside changes on relevant attributes\n   */\n  @Watch('pages')\n  @Watch('currentpage')\n  @Watch('count')\n  watchHandler() {\n    this.sliceAndSetDefaults();\n  }\n\n  @Element() hostElement: HTMLDbPaginationElement;\n  /*\n   * Sets the initial values on components first load\n   */\n  componentWillLoad() {\n    this.sliceAndSetDefaults();\n  }\n\n  private sliceAndSetDefaults() {\n    const pagesFullOverload = Array.from(Array(this.pages + 1).keys());\n    const [, ...pagesFull] = pagesFullOverload;\n    this.pagesFull = pagesFull;\n  }\n\n  private decorateChild(child) {\n    child.setAttribute('class', 'elm-link');\n    if (child.getAttribute('data-currentpage')) {\n      child.setAttribute('aria-current', 'page');\n      child.setAttribute('aria-disabled', 'true');\n    }\n    return <li innerHTML={child.outerHTML} />;\n  }\n\n  private paginationButtonFragment({\n    page,\n    curr,\n    ariaCurrent,\n    ariaDisabled,\n    title,\n    rel,\n    tabindex,\n    disabled,\n    index\n  }) {\n    return (\n      <li key={index}>\n        <button\n          class=\"elm-link\"\n          data-rel={rel === 'none' ? false : `${rel}`}\n          tabindex={tabindex ? '-1' : false}\n          title={title + ` ${page ? page : ''}`}\n          type=\"button\"\n          {...((page === curr || disabled) && ariaCurrent)}\n          {...((page === curr || disabled) && ariaDisabled)}\n          onClick={(event) => this.handleChange(event)}\n        >\n          {page}\n        </button>\n      </li>\n    );\n  }\n\n  private navElement(children) {\n    return (\n      <nav\n        class=\"cmp-pagination\"\n        role=\"navigation\"\n        aria-labelledby={this.ariaid}\n      >\n        <h2 class=\"elm-headline \" id={this.ariaid}>\n          {this.arialabel.charAt(0).toUpperCase() + this.arialabel.slice(1)}\n        </h2>\n        <ol>{children}</ol>\n      </nav>\n    );\n  }\n\n  private slotChildren() {\n    const _children = Array.from(this.hostElement.children);\n\n    // Don't render the children provided via slot\n    this.hostElement.innerHTML = '';\n\n    const [firstChild, ...withoutFirst] = _children;\n    const [lastChild, ...withoutTips] = [...withoutFirst].reverse();\n    const tiplessChildren = withoutTips.reverse();\n\n    const currentPage = tiplessChildren.findIndex((child) =>\n      child.getAttribute('data-currentpage')\n    );\n\n    const prevPage = (\n      currentPage >= 0\n        ? tiplessChildren[currentPage - 1].cloneNode(true)\n        : firstChild.cloneNode(true)\n    ) as HTMLAnchorElement;\n\n    prevPage.setAttribute('rel', 'prev');\n    prevPage.setAttribute('tabindex', '-1');\n\n    const nextPage = (\n      currentPage >= 0 && tiplessChildren.length <= currentPage\n        ? tiplessChildren[currentPage + 1].cloneNode(true)\n        : lastChild.cloneNode(true)\n    ) as HTMLAnchorElement;\n    nextPage.setAttribute('rel', 'next');\n\n    return this.navElement(\n      <Fragment>\n        {this.decorateChild(prevPage)}\n        {this.decorateChild(firstChild)}\n        {this.ellipsisstart && <li>&hellip;</li>}\n        {tiplessChildren.map(this.decorateChild)}\n        {this.ellipsisend && <li>&hellip;</li>}\n        {this.decorateChild(lastChild)}\n        {this.decorateChild(nextPage)}\n      </Fragment>\n    );\n  }\n\n  private goToPreviousPage() {\n    return this.paginationButtonFragment({\n      page: this.currentpage === 1 ? this.currentpage : this.currentpage - 1,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'prev',\n      tabindex: true,\n      disabled: this.currentpage === 1,\n      index: 'A'\n    });\n  }\n\n  private goToNextPage() {\n    return this.paginationButtonFragment({\n      page:\n        this.currentpage === this.pages + 1\n          ? this.currentpage\n          : this.currentpage + 1,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlenext,\n      rel: 'next',\n      tabindex: true,\n      disabled: this.currentpage === this.pages ? true : false,\n      index: 'E'\n    });\n  }\n\n  private goToFirstPage() {\n    return this.paginationButtonFragment({\n      page: this.pagesFull[0],\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: false,\n      index: 'B'\n    });\n  }\n\n  private goToLastPage() {\n    return this.paginationButtonFragment({\n      page: this.pagesFull.slice(-1),\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: this.currentpage === this.pages,\n      index: 'C'\n    });\n  }\n\n  private showMiddlePage(num: number) {\n    return this.paginationButtonFragment({\n      page: num,\n      curr: this.currentpage,\n      ariaCurrent: { 'aria-current': 'page' },\n      ariaDisabled: { 'aria-disabled': 'true' },\n      title: this.titlepagination,\n      rel: 'none',\n      tabindex: false,\n      disabled: false,\n      index: num\n    });\n  }\n\n  private showEllipsis(place: string) {\n    if (this.pagesFull.length < 8) {\n      return null;\n    }\n    if (this.currentpage < 4 && place === 'front') {\n      return null;\n    }\n    if (this.currentpage > this.pagesFull.length - 5 && place === 'back') {\n      return null;\n    }\n    return <li key={place}>&hellip;</li>;\n  }\n\n  private sliceCenterPages() {\n    // Decide how to cut the pages for the middle of the pagination\n    if (this.pagesFull.length < 8) {\n      return this.pagesFull.slice(1, -1);\n    }\n\n    const localCount =\n      this.currentpage <= 3 || this.currentpage >= this.pagesFull.length - 3\n        ? this.count + 1\n        : this.count;\n\n    if (this.currentpage + this.count >= this.pagesFull.length) {\n      return this.pagesFull.slice(-localCount - 1, -1);\n    }\n    if (this.pagesFull.length - 2 <= localCount) {\n      return this.pagesFull.slice(1, 1 + this.pagesFull.length - 2);\n    }\n    if (this.pagesFull.length - 2 > localCount && this.currentpage <= 3) {\n      return this.pagesFull.slice(1, 1 + localCount);\n    }\n    if (\n      this.pagesFull.length - 2 > this.count &&\n      this.currentpage > 3 &&\n      this.currentpage + this.count < this.pagesFull.length\n    ) {\n      const finalSlice = this.pagesFull.slice(\n        this.currentpage - 1,\n        this.currentpage + localCount\n      );\n\n      const isAtTheEnd = finalSlice.includes(this.pagesFull.length - 1);\n      return isAtTheEnd ? finalSlice : finalSlice.slice(0, -1);\n    }\n    return [];\n  }\n\n  private centerPages() {\n    return this.sliceCenterPages().map((num) => this.showMiddlePage(num));\n  }\n\n  render() {\n    const _children = Array.from(this.hostElement.children);\n    const hasChildren = _children.find(\n      (child) => child.tagName.toLowerCase() === 'a'\n    );\n\n    if (hasChildren) {\n      return this.slotChildren();\n    }\n\n    return this.navElement(\n      <Fragment>\n        {this.goToPreviousPage()}\n        {this.goToFirstPage()}\n        {this.showEllipsis('front')}\n        {this.pagesFull.length >= 3 ? this.centerPages() : null}\n        {this.showEllipsis('back')}\n        {this.goToLastPage()}\n        {this.goToNextPage()}\n      </Fragment>\n    );\n  }\n}\n","@import 'db-ui-core.general';\n@import 'pagination';\n@import 'link';\n\n:host {\n  @extend html;\n  @extend body;\n}\n\n// TODO: Maybe move the following to DB UI Core, as we might need to enable buttons in general\n.cmp-pagination {\n  button {\n    border: none;\n    font-size: 0.875rem;\n    background-color: inherit;\n    cursor: pointer;\n  }\n\n  .elm-link {\n    &[data-rel='prev'] {\n      @include icon(glyph(chevron-left), $partial: true);\n      @include is-icon-text-replace();\n    }\n\n    &[data-rel='next'] {\n      @include icon(glyph(chevron-right), $partial: true);\n      @include is-icon-text-replace();\n    }\n  }\n}\n\n.elm-link[aria-disabled='true'][aria-current='page'] {\n  opacity: 1;\n}\n","import { DbLinkType } from '../components/db-link/db-link-type';\n\nexport const format = (first: string, middle: string, last: string): string =>\n  (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n\nexport const uuid = () => {\n  return window.crypto?.randomUUID() || Math.random().toString();\n};\n\n/**\n *\n * @param doc calculates all css custom properties in root: scope\n * @return list of keys\n */\nexport const calcCustomProperties = (doc: Document) =>\n  [].slice\n    .call(doc.styleSheets)\n    .map((styleSheet) => [].slice.call(styleSheet.cssRules))\n    .flat()\n    .filter((cssRule) => cssRule.selectorText === ':root')\n    .map((cssStyleRule) => cssStyleRule.style)\n    .map((cssStyleDeclaration) => [].slice.call(cssStyleDeclaration))\n    .flat();\n\n/**\n * @return - Promise with all css custom properties in the root: scope,\n * that is resoved when document load is complete\n */\nexport const listCustomProperties = async () =>\n  domReady().then(\n    (doc: Document) => {\n      return calcCustomProperties(doc);\n    },\n    (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  );\n\n/**\n * @return: Promisse, that resolve when document load is complete\n */\nexport const domReady = () => {\n  return new Promise((resolve, reject) => {\n    document.readyState || reject(\"Can't resolve document readystate\");\n    if (document.readyState === 'complete') {\n      resolve(document);\n    } else {\n      window.addEventListener('load', function () {\n        resolve(document);\n      });\n    }\n  });\n};\n\n/**\n * Adds the class \"elm-link\" to a element which are not db-link\n * @param child the stencil element\n */\nexport const addElmLinkToElement = (child: Element) => {\n  const currentClass = child.getAttribute('class');\n  if (child.tagName.toLowerCase() !== 'db-link') {\n    if (!currentClass) {\n      child.setAttribute('class', `elm-link`);\n    } else if (!currentClass.includes('elm-link')) {\n      child.setAttribute('class', `${currentClass} elm-link`);\n    }\n  }\n};\n\nexport const getDefaultLinkData = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n/**\n * Adds the given variant as attribute for all db-links\n * @param host the stencil host element\n * @param variant icon variant\n */\nexport const addIconVariantToAllDbLinksRecursive = (\n  host: Element,\n  variant:\n    | '16-filled'\n    | '20-filled'\n    | '24-filled'\n    | '32-filled'\n    | '48-filled'\n    | '64-filled'\n    | '16-outline'\n    | '20-outline'\n    | '24-outline'\n    | '32-outline'\n    | '48-outline'\n    | '64-outline'\n) => {\n  if (host.children) {\n    Array.from(host.children).forEach((child) => {\n      if (child.tagName.toLowerCase() === 'db-link') {\n        child.setAttribute('icon-variant', variant);\n      }\n      if (child.children) {\n        addIconVariantToAllDbLinksRecursive(child, variant);\n      }\n    });\n  }\n};\n\n/**\n * Without framework (Angular, React, Vue) we will need to pass a data as\n * string.\n */\nexport const parseData = (item: string | object | unknown) => {\n  try {\n    if (typeof item === 'string') {\n      return JSON.parse(item);\n    }\n    if (typeof item === 'object') return item;\n    if (item instanceof Array) return item;\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["DbPagination","uuid","event","this","dbChange","emit","sliceAndSetDefaults","key","value","pagesFull","Array","from","pages","keys","child","setAttribute","getAttribute","h","innerHTML","outerHTML","page","curr","ariaCurrent","ariaDisabled","title","rel","tabindex","disabled","index","class","type","onClick","_this","handleChange","children","role","ariaid","id","arialabel","charAt","toUpperCase","slice","_children","hostElement","firstChild","withoutFirst","_toConsumableArray","reverse","_reverse2","lastChild","tiplessChildren","currentPage","findIndex","prevPage","cloneNode","nextPage","length","navElement","Fragment","decorateChild","ellipsisstart","map","ellipsisend","paginationButtonFragment","currentpage","titlepagination","titlenext","num","place","localCount","count","finalSlice","includes","sliceCenterPages","_this2","showMiddlePage","find","tagName","toLowerCase","slotChildren","goToPreviousPage","goToFirstPage","showEllipsis","centerPages","goToLastPage","goToNextPage","get","window","crypto","randomUUID","Math","random","toString","getDefaultLinkData","compData","data","href","target","label","join","addIconVariantToAllDbLinksRecursive","host","variant","forEach","parseData","item","JSON","parse","error"],"sourceRoot":""}