{"version":3,"names":["dbMainnavigationCss","DbMainnavigationStyle0","getJsxLinks","items","map","item","index","h","key","concat","innerHTML","html","children","setupItemsRecursive","forEach","child","singleAnchor","length","push","outerHTML","Array","from","cleanUpItem","replace","setupOnlyDbLinkNavigation","nonDbLinkChildren","filter","tagName","toLowerCase","getCompDataHtml","compData","data","listTag","hasChildren","link","current","label","addAreaPopupsRecursive","subChildren","find","sChild","setAttribute","DbMainnavigation","exports","class_1","prototype","componentWillLoad","this","parseData","host","onlyLinks","hasItemsWrapper","render","class","id","type","htmlFor","title","siteName"],"sources":["src/components/db-mainnavigation/db-mainnavigation.scss?tag=db-mainnavigation","src/components/db-mainnavigation/db-mainnavigation.tsx"],"sourcesContent":["@import '../general';\n@import 'mainnavigation';\n","import { Component, Element, h, Prop } from '@stencil/core';\nimport {\n  DbMainnavigationDataType,\n  DbMainnavigationItemType\n} from './db-mainnavigation-type';\nimport { parseData } from '../../utils/utils';\n\nconst getJsxLinks = (items: DbMainnavigationItemType[]) => {\n  return items.map((item, index) => (\n    <li key={`mainnavigation-item-${index}`} innerHTML={item.html}>\n      {item.children && <ul>{getJsxLinks(item.children)}</ul>}\n    </li>\n  ));\n};\n\nconst setupItemsRecursive = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const items: DbMainnavigationItemType[] = [];\n  children.forEach((child) => {\n    const singleAnchor = child.children.length === 1;\n\n    items.push({\n      html: child.outerHTML,\n      children:\n        !singleAnchor && child.children\n          ? setupItemsRecursive(Array.from(child.children))\n          : []\n    });\n  });\n  return items;\n};\nconst cleanUpItem = (item: DbMainnavigationItemType) => {\n  item.children.forEach((child) => {\n    item.html = item.html.replace(child.html, '');\n    cleanUpItem(child);\n  });\n};\n\nconst setupOnlyDbLinkNavigation = (\n  children: Element[]\n): DbMainnavigationItemType[] => {\n  const nonDbLinkChildren = children.filter(\n    (child) =>\n      child.tagName.toLowerCase() !== 'db-link' &&\n      child.tagName.toLowerCase() !== 'a'\n  );\n  if (nonDbLinkChildren.length === 0) {\n    const items = setupItemsRecursive(children);\n    items.forEach((item) => {\n      cleanUpItem(item);\n    });\n    return items;\n  }\n  return [];\n};\n\nconst getCompDataHtml = (compData: DbMainnavigationDataType[]) => {\n  let html = '';\n\n  compData.forEach((data) => {\n    let listTag = '<li>\\n';\n    let hasChildren = false;\n    if (data.children && data.children.length > 0) {\n      listTag = '<li aria-haspopup=\"true\">\\n';\n      hasChildren = true;\n    }\n\n    listTag += `<db-link href=\"${data.link}\" current=\"${\n      data.current ? 'page' : false\n    }\">${data.label}</db-link>\\n`;\n    html += listTag;\n    if (hasChildren) {\n      html += `<ul>\\n${getCompDataHtml(data.children)}</ul>\\n`;\n    }\n    html += '</li>';\n  });\n  return html;\n};\n\nconst addAreaPopupsRecursive = (children: Element[]) => {\n  if (children && children.length > 0) {\n    children.forEach((child) => {\n      if (child.tagName.toLowerCase() === 'li' && child.children) {\n        const subChildren = Array.from(child.children);\n        if (\n          subChildren.find((sChild) => sChild.tagName.toLowerCase() === 'ul')\n        ) {\n          child.setAttribute('aria-haspopup', 'true');\n        }\n        addAreaPopupsRecursive(subChildren);\n      }\n    });\n  }\n};\n\n@Component({\n  tag: 'db-mainnavigation',\n  styleUrl: 'db-mainnavigation.scss'\n})\nexport class DbMainnavigation {\n  /**\n   * The site-name attribute can be set to have the site name for small screens.\n   */\n  @Prop({ reflect: true, attribute: 'site-name' }) siteName?: string;\n\n  /**\n   * The data attribute can be used to generate main navigation by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  private hasItemsWrapper: boolean;\n\n  private compData: DbMainnavigationDataType[];\n\n  private children: Element[];\n  private onlyLinks: DbMainnavigationItemType[];\n\n  @Element() host: HTMLDbMainnavigationElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this.children = Array.from(this.host.children);\n      this.onlyLinks = setupOnlyDbLinkNavigation(this.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n        addAreaPopupsRecursive(this.children);\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <nav class=\"cmp-mainnavigation\" id=\"mainnavigation\">\n        <input type=\"checkbox\" id=\"toggle_mainnavigation\" />\n        <label\n          htmlFor=\"toggle_mainnavigation\"\n          title=\"Toggle main navigation\"\n          class=\"is-site-name\"\n        >\n          {this.siteName}\n        </label>\n        {this.compData && <ul innerHTML={getCompDataHtml(this.compData)} />}\n        {!this.compData && (\n          <ul>\n            {this.onlyLinks && getJsxLinks(this.onlyLinks)}\n            {!this.hasItemsWrapper &&\n              !this.onlyLinks &&\n              this.children.map((child, index) => (\n                <li\n                  key={`cmp-mainnavigation-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ul>\n        )}\n      </nav>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}