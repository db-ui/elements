{"version":3,"file":"static/js/438.df035dd8.chunk.js","mappings":"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","sources":["../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-table/db-table.scss?tag=db-table&encapsulation=scoped","../../../packages/db-ui-elements-stencil/dist/esm/src/components/db-table/db-table.tsx"],"sourcesContent":["@import '../general';\n@import 'table';\n","import { Component, h, Prop, Watch } from '@stencil/core';\nimport { TableDataType } from './type';\n\n@Component({\n  tag: 'db-table',\n  styleUrl: 'db-table.scss',\n  scoped: true\n})\nexport class DbTable {\n  private errorTableData: TableDataType = {\n    caption: 'No valid table data provided',\n    headers: ['Error parsing data'],\n    columns: {\n      'Error parsing data': ['please check data']\n    },\n    rows: [\n      {\n        error: [undefined, 'Error parsing data']\n      }\n    ]\n  };\n\n  /**\n   * The tabledata prop receives a stringified object of the type\n   * \"TableDataType\" and sets the initial value of the table.\n   * It can also be set as a property from the outside via JavaScript\n   */\n  @Prop({ reflect: false }) tabledata: string | object;\n\n  /**\n   * Either holds the value of the validated tabledata prop or \"errorTableData\"\n   */\n  private validTableData: TableDataType;\n\n  /**\n   * Validates and sets the value of validTableData upon modification of the\n   * tabledata attribute/property.\n   */\n  @Watch('tabledata')\n  validateTableData(newTableData: TableDataType) {\n    const { caption, headers, columns, rows } = newTableData;\n    const columnKeys =\n      typeof columns === 'object' && columns !== null\n        ? Object.keys(columns)\n        : [];\n    const isHeader = headers?.length > 0;\n    const isRowAndColumn = Array.isArray(rows) && columnKeys.length > 0;\n\n    if (!caption || isRowAndColumn || !isHeader) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Table data invalid: check caption or headers/columns mismatch'\n      );\n      this.validTableData = this.errorTableData;\n      return;\n    }\n    this.validTableData = newTableData;\n  }\n\n  /**\n   * Validate incoming table data props once on creation because they do not fire @watch\n   */\n  componentWillLoad() {\n    this.validateTableData(this.parseTabularData(this.tabledata));\n  }\n\n  /**\n   * The align prop sets the data-align attribute on the thead\n   * element of the rendered table. Valid values are \"left\" (default), \"center\",\n   * \"bottom\"\n   */\n  @Prop({ reflect: true }) align?: string = '';\n\n  /**\n   * The verticalalign prop sets the data-vertical-align attribute on\n   * the thead element of the rendered table. Valid values are \"top\"\n   * (default), \"middle\", \"bottom\"\n   */\n  @Prop({ reflect: true }) verticalalign?: string = '';\n\n  /**\n   * The bodyalign prop sets the data-align attribute on\n   * the tbody element of the rendered table. Valid values are \"left\"\n   * (default), \"center\", \"bottom\"\n   */\n  @Prop({ reflect: true }) bodyalign?: string = '';\n\n  /**\n   * The bodyverticalalign prop sets the data-vertical-align attribute\n   * on the tbody element of the rendered table. Valid values are \"top\"\n   * (default), \"middle\", \"bottom\"\n   */\n  @Prop({ reflect: true }) bodyverticalalign?: string = '';\n\n  /**\n   * The border prop sets the data-border attribute\n   * on the table element of the rendered table. Valid values are \"around\",\n   * \"horizontal\"\n   */\n  @Prop({ reflect: true }) border?: string = '';\n\n  /**\n   * The density prop sets the data-density attribute\n   * on the table element of the rendered table. Valid values are \"small\",\n   * \"regular\", \"large\"\n   */\n  @Prop({ reflect: true }) density?: string = '';\n\n  /**\n   * The fontsize prop sets the the font size of the style attribute\n   * on the table element of the rendered table.\n   */\n  @Prop({ reflect: true }) fontsize?: string = '1rem';\n\n  /**\n   * The stripes prop sets the the zebra stripes coloring of the rendered table.\n   */\n  @Prop({ reflect: true }) stripes?: string = '';\n\n  /**\n   * The sticky prop sets the table header stickyness of the rendered table.\n   */\n  @Prop({ reflect: true }) sticky?: string = '';\n\n  /**\n   * Without framework (Angular, React, Vue) we will need to pass a tabledata as\n   * string. parseTabularData() will return a fallback so the renderd table can\n   * inform the user about a mismatching value if the string cannot be parsed.\n   */\n  private parseTabularData(item: string | object) {\n    try {\n      if (typeof item === 'string') {\n        return JSON.parse(item);\n      }\n      if (typeof item === 'object') return item;\n    } catch (error) {\n      return this.errorTableData;\n    }\n  }\n\n  /**\n   * We need to know which column of the table is the longest so we can fill\n   * shorter columns with empty cells\n   */\n  private calcColumnLength(\n    tableHeaders: TableDataType['headers'],\n    tableColumns: TableDataType['columns']\n  ) {\n    return tableColumns === undefined\n      ? []\n      : tableHeaders.reduce((prevCol, currentCol) => {\n          return prevCol < tableColumns[currentCol].length\n            ? tableColumns[currentCol].length\n            : prevCol;\n        }, 0);\n  }\n\n  private isRowData(tableData) {\n    return !!Array.isArray(tableData.rows);\n  }\n\n  render() {\n    const isRowData = this.isRowData(this.validTableData);\n    const { caption, headers, columns, rows, rowTitles, rowTitle } =\n      this.validTableData;\n    const maxColumnLength = this.calcColumnLength(headers, columns);\n    const columnIter = [...Array(maxColumnLength).keys()];\n    const showRowTitles = rowTitles?.length > 0;\n\n    return (\n      <div>\n        <table\n          class=\"cmp-table\"\n          data-border={this.border ? this.border : null}\n          data-density={this.density ? this.density : null}\n          style={{ '--table---fontSize': this.fontsize }}\n          data-rows={this.stripes ? this.stripes : null}\n          data-sticky={this.sticky ? this.sticky : null}\n        >\n          <caption>{caption}</caption>\n          <thead\n            data-align={this.align ? this.align : null}\n            data-vertical-align={this.verticalalign ? this.verticalalign : null}\n          >\n            <tr>\n              {rowTitle && <th scope=\"col\">{rowTitle}</th>}\n              {headers.map((head, index) => (\n                <th key={`table-header-${index}`} scope=\"col\">\n                  {head}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody\n            data-align={this.bodyalign ? this.bodyalign : null}\n            data-vertical-align={\n              this.bodyverticalalign ? this.bodyverticalalign : null\n            }\n          >\n            {isRowData &&\n              rows.map((obj, idx) => {\n                return (\n                  <tr key={`row-${idx}`} class={`row-${idx}`}>\n                    {showRowTitles && <th scope=\"row\">{rowTitles[idx]}</th>}\n                    {headers.map((table, index) => {\n                      // If no row is provided, return empty cell [null, null]\n                      const [icon, cellText] = obj[table] ?? [null, null];\n                      return (\n                        <td key={`cell-${idx}-${index}`}>\n                          {icon && <db-icon icon={icon} />}\n                          {cellText}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            {!isRowData &&\n              columnIter.map((num, idx) => (\n                <tr key={`row-${idx}`} class={`row-${num}`}>\n                  {showRowTitles && <th scope=\"row\">{rowTitles[idx]}</th>}\n                  {headers.map((table, index) => {\n                    const [icon, cellText] = columns[table][idx] ?? [\n                      null,\n                      null\n                    ];\n                    return (\n                      <td key={`cell-${idx}-${index}`}>\n                        {icon && <db-icon icon={icon} />}\n                        {cellText}\n                      </td>\n                    );\n                  })}\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"],"names":["DbTable","errorTableData","caption","headers","columns","rows","error","undefined","validateTableData","newTableData","columnKeys","Object","keys","isHeader","length","isRowAndColumn","Array","isArray","console","this","validTableData","componentWillLoad","parseTabularData","tabledata","item","JSON","parse","calcColumnLength","tableHeaders","tableColumns","reduce","prevCol","currentCol","isRowData","tableData","render","rowTitles","rowTitle","maxColumnLength","columnIter","showRowTitles","h","class","border","density","style","fontsize","stripes","sticky","align","verticalalign","scope","map","head","index","key","concat","bodyalign","bodyverticalalign","obj","idx","table","icon","cellText","_a","num"],"sourceRoot":""}